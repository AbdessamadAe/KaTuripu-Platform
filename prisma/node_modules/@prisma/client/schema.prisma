// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                 @id
  email            String                 @unique
  name             String?
  image            String?
  role             String?
  createdAt        DateTime               @default(now()) @map(name: "created_at")
  updatedAt        DateTime               @default(now()) @map(name: "updated_at")
  exerciseProgress UserExerciseProgress[]

  @@map(name: "users")
}

model Roadmap {
  id          String        @id @default(uuid())
  title       String
  description String?
  category    String?
  imageUrl    String?       @map(name: "image_url")
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  nodes       RoadmapNode[]
  edges       RoadmapEdge[]

  @@map(name: "roadmaps")
}

model RoadmapNode {
  id          String         @id @default(uuid())
  roadmapId   String         @map(name: "roadmap_id")
  roadmap     Roadmap        @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  label       String
  description String?
  type        String         @default("progressNode")
  positionX   Int?           @map(name: "position_x")
  positionY   Int?           @map(name: "position_y")
  edgesSource RoadmapEdge[]  @relation("sourceEdges")
  edgesTarget RoadmapEdge[]  @relation("targetEdges")
  exercises   NodeExercise[]

  @@map(name: "roadmap_nodes")
}

model RoadmapEdge {
  id           String      @id @default(uuid())
  roadmapId    String      @map(name: "roadmap_id")
  roadmap      Roadmap     @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  sourceNodeId String      @map(name: "source_node_id")
  sourceNode   RoadmapNode @relation("sourceEdges", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNodeId String      @map(name: "target_node_id")
  targetNode   RoadmapNode @relation("targetEdges", fields: [targetNodeId], references: [id], onDelete: Cascade)

  @@map(name: "roadmap_edges")
}

model Exercise {
  id               String                 @id
  name             String
  difficulty       String
  hints            String[]
  solution         String?
  videoUrl         String?                @map(name: "video_url")
  description      String?
  questionImageUrl String?                @map(name: "question_image_url")
  type             String?
  isActive         Boolean                @default(true) @map(name: "is_active")
  nodeExercises    NodeExercise[]
  userProgress     UserExerciseProgress[]

  @@map(name: "exercises")
}

model NodeExercise {
  nodeId     String      @map(name: "node_id")
  node       RoadmapNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  exerciseId String      @map(name: "exercise_id")
  exercise   Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  orderIndex Int?        @map(name: "order_index")

  @@id([nodeId, exerciseId])
  @@map(name: "node_exercises")
}

model UserExerciseProgress {
  userId      String    @map(name: "user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseId  String    @map(name: "exercise_id")
  exercise    Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  completed   Boolean   @default(false)
  completedAt DateTime? @map(name: "completed_at")

  @@id([userId, exerciseId])
  @@map(name: "user_exercise_progress")
}
