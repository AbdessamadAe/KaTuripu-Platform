
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Roadmap
 * 
 */
export type Roadmap = $Result.DefaultSelection<Prisma.$RoadmapPayload>
/**
 * Model RoadmapNode
 * 
 */
export type RoadmapNode = $Result.DefaultSelection<Prisma.$RoadmapNodePayload>
/**
 * Model RoadmapEdge
 * 
 */
export type RoadmapEdge = $Result.DefaultSelection<Prisma.$RoadmapEdgePayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model NodeExercise
 * 
 */
export type NodeExercise = $Result.DefaultSelection<Prisma.$NodeExercisePayload>
/**
 * Model UserExerciseProgress
 * 
 */
export type UserExerciseProgress = $Result.DefaultSelection<Prisma.$UserExerciseProgressPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roadmap`: Exposes CRUD operations for the **Roadmap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roadmaps
    * const roadmaps = await prisma.roadmap.findMany()
    * ```
    */
  get roadmap(): Prisma.RoadmapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roadmapNode`: Exposes CRUD operations for the **RoadmapNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoadmapNodes
    * const roadmapNodes = await prisma.roadmapNode.findMany()
    * ```
    */
  get roadmapNode(): Prisma.RoadmapNodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roadmapEdge`: Exposes CRUD operations for the **RoadmapEdge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoadmapEdges
    * const roadmapEdges = await prisma.roadmapEdge.findMany()
    * ```
    */
  get roadmapEdge(): Prisma.RoadmapEdgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nodeExercise`: Exposes CRUD operations for the **NodeExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NodeExercises
    * const nodeExercises = await prisma.nodeExercise.findMany()
    * ```
    */
  get nodeExercise(): Prisma.NodeExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userExerciseProgress`: Exposes CRUD operations for the **UserExerciseProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserExerciseProgresses
    * const userExerciseProgresses = await prisma.userExerciseProgress.findMany()
    * ```
    */
  get userExerciseProgress(): Prisma.UserExerciseProgressDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Roadmap: 'Roadmap',
    RoadmapNode: 'RoadmapNode',
    RoadmapEdge: 'RoadmapEdge',
    Exercise: 'Exercise',
    NodeExercise: 'NodeExercise',
    UserExerciseProgress: 'UserExerciseProgress'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "roadmap" | "roadmapNode" | "roadmapEdge" | "exercise" | "nodeExercise" | "userExerciseProgress"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Roadmap: {
        payload: Prisma.$RoadmapPayload<ExtArgs>
        fields: Prisma.RoadmapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoadmapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoadmapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>
          }
          findFirst: {
            args: Prisma.RoadmapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoadmapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>
          }
          findMany: {
            args: Prisma.RoadmapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>[]
          }
          create: {
            args: Prisma.RoadmapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>
          }
          createMany: {
            args: Prisma.RoadmapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoadmapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>[]
          }
          delete: {
            args: Prisma.RoadmapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>
          }
          update: {
            args: Prisma.RoadmapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>
          }
          deleteMany: {
            args: Prisma.RoadmapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoadmapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoadmapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>[]
          }
          upsert: {
            args: Prisma.RoadmapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapPayload>
          }
          aggregate: {
            args: Prisma.RoadmapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoadmap>
          }
          groupBy: {
            args: Prisma.RoadmapGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoadmapGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoadmapCountArgs<ExtArgs>
            result: $Utils.Optional<RoadmapCountAggregateOutputType> | number
          }
        }
      }
      RoadmapNode: {
        payload: Prisma.$RoadmapNodePayload<ExtArgs>
        fields: Prisma.RoadmapNodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoadmapNodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoadmapNodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>
          }
          findFirst: {
            args: Prisma.RoadmapNodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoadmapNodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>
          }
          findMany: {
            args: Prisma.RoadmapNodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>[]
          }
          create: {
            args: Prisma.RoadmapNodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>
          }
          createMany: {
            args: Prisma.RoadmapNodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoadmapNodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>[]
          }
          delete: {
            args: Prisma.RoadmapNodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>
          }
          update: {
            args: Prisma.RoadmapNodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>
          }
          deleteMany: {
            args: Prisma.RoadmapNodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoadmapNodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoadmapNodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>[]
          }
          upsert: {
            args: Prisma.RoadmapNodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapNodePayload>
          }
          aggregate: {
            args: Prisma.RoadmapNodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoadmapNode>
          }
          groupBy: {
            args: Prisma.RoadmapNodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoadmapNodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoadmapNodeCountArgs<ExtArgs>
            result: $Utils.Optional<RoadmapNodeCountAggregateOutputType> | number
          }
        }
      }
      RoadmapEdge: {
        payload: Prisma.$RoadmapEdgePayload<ExtArgs>
        fields: Prisma.RoadmapEdgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoadmapEdgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoadmapEdgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>
          }
          findFirst: {
            args: Prisma.RoadmapEdgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoadmapEdgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>
          }
          findMany: {
            args: Prisma.RoadmapEdgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>[]
          }
          create: {
            args: Prisma.RoadmapEdgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>
          }
          createMany: {
            args: Prisma.RoadmapEdgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoadmapEdgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>[]
          }
          delete: {
            args: Prisma.RoadmapEdgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>
          }
          update: {
            args: Prisma.RoadmapEdgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>
          }
          deleteMany: {
            args: Prisma.RoadmapEdgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoadmapEdgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoadmapEdgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>[]
          }
          upsert: {
            args: Prisma.RoadmapEdgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoadmapEdgePayload>
          }
          aggregate: {
            args: Prisma.RoadmapEdgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoadmapEdge>
          }
          groupBy: {
            args: Prisma.RoadmapEdgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoadmapEdgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoadmapEdgeCountArgs<ExtArgs>
            result: $Utils.Optional<RoadmapEdgeCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      NodeExercise: {
        payload: Prisma.$NodeExercisePayload<ExtArgs>
        fields: Prisma.NodeExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NodeExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NodeExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>
          }
          findFirst: {
            args: Prisma.NodeExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NodeExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>
          }
          findMany: {
            args: Prisma.NodeExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>[]
          }
          create: {
            args: Prisma.NodeExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>
          }
          createMany: {
            args: Prisma.NodeExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NodeExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>[]
          }
          delete: {
            args: Prisma.NodeExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>
          }
          update: {
            args: Prisma.NodeExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>
          }
          deleteMany: {
            args: Prisma.NodeExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NodeExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NodeExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>[]
          }
          upsert: {
            args: Prisma.NodeExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeExercisePayload>
          }
          aggregate: {
            args: Prisma.NodeExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNodeExercise>
          }
          groupBy: {
            args: Prisma.NodeExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<NodeExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.NodeExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<NodeExerciseCountAggregateOutputType> | number
          }
        }
      }
      UserExerciseProgress: {
        payload: Prisma.$UserExerciseProgressPayload<ExtArgs>
        fields: Prisma.UserExerciseProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserExerciseProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserExerciseProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>
          }
          findFirst: {
            args: Prisma.UserExerciseProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserExerciseProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>
          }
          findMany: {
            args: Prisma.UserExerciseProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>[]
          }
          create: {
            args: Prisma.UserExerciseProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>
          }
          createMany: {
            args: Prisma.UserExerciseProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserExerciseProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>[]
          }
          delete: {
            args: Prisma.UserExerciseProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>
          }
          update: {
            args: Prisma.UserExerciseProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>
          }
          deleteMany: {
            args: Prisma.UserExerciseProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserExerciseProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserExerciseProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>[]
          }
          upsert: {
            args: Prisma.UserExerciseProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserExerciseProgressPayload>
          }
          aggregate: {
            args: Prisma.UserExerciseProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserExerciseProgress>
          }
          groupBy: {
            args: Prisma.UserExerciseProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserExerciseProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserExerciseProgressCountArgs<ExtArgs>
            result: $Utils.Optional<UserExerciseProgressCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    roadmap?: RoadmapOmit
    roadmapNode?: RoadmapNodeOmit
    roadmapEdge?: RoadmapEdgeOmit
    exercise?: ExerciseOmit
    nodeExercise?: NodeExerciseOmit
    userExerciseProgress?: UserExerciseProgressOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    exerciseProgress: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exerciseProgress?: boolean | UserCountOutputTypeCountExerciseProgressArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExerciseProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserExerciseProgressWhereInput
  }


  /**
   * Count Type RoadmapCountOutputType
   */

  export type RoadmapCountOutputType = {
    nodes: number
    edges: number
  }

  export type RoadmapCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | RoadmapCountOutputTypeCountNodesArgs
    edges?: boolean | RoadmapCountOutputTypeCountEdgesArgs
  }

  // Custom InputTypes
  /**
   * RoadmapCountOutputType without action
   */
  export type RoadmapCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapCountOutputType
     */
    select?: RoadmapCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoadmapCountOutputType without action
   */
  export type RoadmapCountOutputTypeCountNodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapNodeWhereInput
  }

  /**
   * RoadmapCountOutputType without action
   */
  export type RoadmapCountOutputTypeCountEdgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapEdgeWhereInput
  }


  /**
   * Count Type RoadmapNodeCountOutputType
   */

  export type RoadmapNodeCountOutputType = {
    edgesSource: number
    edgesTarget: number
    exercises: number
  }

  export type RoadmapNodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    edgesSource?: boolean | RoadmapNodeCountOutputTypeCountEdgesSourceArgs
    edgesTarget?: boolean | RoadmapNodeCountOutputTypeCountEdgesTargetArgs
    exercises?: boolean | RoadmapNodeCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes
  /**
   * RoadmapNodeCountOutputType without action
   */
  export type RoadmapNodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNodeCountOutputType
     */
    select?: RoadmapNodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoadmapNodeCountOutputType without action
   */
  export type RoadmapNodeCountOutputTypeCountEdgesSourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapEdgeWhereInput
  }

  /**
   * RoadmapNodeCountOutputType without action
   */
  export type RoadmapNodeCountOutputTypeCountEdgesTargetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapEdgeWhereInput
  }

  /**
   * RoadmapNodeCountOutputType without action
   */
  export type RoadmapNodeCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeExerciseWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    nodeExercises: number
    userProgress: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodeExercises?: boolean | ExerciseCountOutputTypeCountNodeExercisesArgs
    userProgress?: boolean | ExerciseCountOutputTypeCountUserProgressArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountNodeExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeExerciseWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountUserProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserExerciseProgressWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    image: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    image: string | null
    role: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exerciseProgress?: boolean | User$exerciseProgressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "image" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exerciseProgress?: boolean | User$exerciseProgressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      exerciseProgress: Prisma.$UserExerciseProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      image: string | null
      role: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exerciseProgress<T extends User$exerciseProgressArgs<ExtArgs> = {}>(args?: Subset<T, User$exerciseProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.exerciseProgress
   */
  export type User$exerciseProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    where?: UserExerciseProgressWhereInput
    orderBy?: UserExerciseProgressOrderByWithRelationInput | UserExerciseProgressOrderByWithRelationInput[]
    cursor?: UserExerciseProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserExerciseProgressScalarFieldEnum | UserExerciseProgressScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Roadmap
   */

  export type AggregateRoadmap = {
    _count: RoadmapCountAggregateOutputType | null
    _min: RoadmapMinAggregateOutputType | null
    _max: RoadmapMaxAggregateOutputType | null
  }

  export type RoadmapMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type RoadmapMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type RoadmapCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    imageUrl: number
    createdAt: number
    _all: number
  }


  export type RoadmapMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    imageUrl?: true
    createdAt?: true
  }

  export type RoadmapMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    imageUrl?: true
    createdAt?: true
  }

  export type RoadmapCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    imageUrl?: true
    createdAt?: true
    _all?: true
  }

  export type RoadmapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roadmap to aggregate.
     */
    where?: RoadmapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roadmaps to fetch.
     */
    orderBy?: RoadmapOrderByWithRelationInput | RoadmapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoadmapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roadmaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roadmaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roadmaps
    **/
    _count?: true | RoadmapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoadmapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoadmapMaxAggregateInputType
  }

  export type GetRoadmapAggregateType<T extends RoadmapAggregateArgs> = {
        [P in keyof T & keyof AggregateRoadmap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoadmap[P]>
      : GetScalarType<T[P], AggregateRoadmap[P]>
  }




  export type RoadmapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapWhereInput
    orderBy?: RoadmapOrderByWithAggregationInput | RoadmapOrderByWithAggregationInput[]
    by: RoadmapScalarFieldEnum[] | RoadmapScalarFieldEnum
    having?: RoadmapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoadmapCountAggregateInputType | true
    _min?: RoadmapMinAggregateInputType
    _max?: RoadmapMaxAggregateInputType
  }

  export type RoadmapGroupByOutputType = {
    id: string
    title: string
    description: string | null
    category: string | null
    imageUrl: string | null
    createdAt: Date
    _count: RoadmapCountAggregateOutputType | null
    _min: RoadmapMinAggregateOutputType | null
    _max: RoadmapMaxAggregateOutputType | null
  }

  type GetRoadmapGroupByPayload<T extends RoadmapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoadmapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoadmapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoadmapGroupByOutputType[P]>
            : GetScalarType<T[P], RoadmapGroupByOutputType[P]>
        }
      >
    >


  export type RoadmapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    nodes?: boolean | Roadmap$nodesArgs<ExtArgs>
    edges?: boolean | Roadmap$edgesArgs<ExtArgs>
    _count?: boolean | RoadmapCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmap"]>

  export type RoadmapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["roadmap"]>

  export type RoadmapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["roadmap"]>

  export type RoadmapSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }

  export type RoadmapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "category" | "imageUrl" | "createdAt", ExtArgs["result"]["roadmap"]>
  export type RoadmapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | Roadmap$nodesArgs<ExtArgs>
    edges?: boolean | Roadmap$edgesArgs<ExtArgs>
    _count?: boolean | RoadmapCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoadmapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoadmapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RoadmapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Roadmap"
    objects: {
      nodes: Prisma.$RoadmapNodePayload<ExtArgs>[]
      edges: Prisma.$RoadmapEdgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      category: string | null
      imageUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["roadmap"]>
    composites: {}
  }

  type RoadmapGetPayload<S extends boolean | null | undefined | RoadmapDefaultArgs> = $Result.GetResult<Prisma.$RoadmapPayload, S>

  type RoadmapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoadmapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoadmapCountAggregateInputType | true
    }

  export interface RoadmapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roadmap'], meta: { name: 'Roadmap' } }
    /**
     * Find zero or one Roadmap that matches the filter.
     * @param {RoadmapFindUniqueArgs} args - Arguments to find a Roadmap
     * @example
     * // Get one Roadmap
     * const roadmap = await prisma.roadmap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoadmapFindUniqueArgs>(args: SelectSubset<T, RoadmapFindUniqueArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Roadmap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoadmapFindUniqueOrThrowArgs} args - Arguments to find a Roadmap
     * @example
     * // Get one Roadmap
     * const roadmap = await prisma.roadmap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoadmapFindUniqueOrThrowArgs>(args: SelectSubset<T, RoadmapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roadmap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapFindFirstArgs} args - Arguments to find a Roadmap
     * @example
     * // Get one Roadmap
     * const roadmap = await prisma.roadmap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoadmapFindFirstArgs>(args?: SelectSubset<T, RoadmapFindFirstArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roadmap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapFindFirstOrThrowArgs} args - Arguments to find a Roadmap
     * @example
     * // Get one Roadmap
     * const roadmap = await prisma.roadmap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoadmapFindFirstOrThrowArgs>(args?: SelectSubset<T, RoadmapFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roadmaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roadmaps
     * const roadmaps = await prisma.roadmap.findMany()
     * 
     * // Get first 10 Roadmaps
     * const roadmaps = await prisma.roadmap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roadmapWithIdOnly = await prisma.roadmap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoadmapFindManyArgs>(args?: SelectSubset<T, RoadmapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Roadmap.
     * @param {RoadmapCreateArgs} args - Arguments to create a Roadmap.
     * @example
     * // Create one Roadmap
     * const Roadmap = await prisma.roadmap.create({
     *   data: {
     *     // ... data to create a Roadmap
     *   }
     * })
     * 
     */
    create<T extends RoadmapCreateArgs>(args: SelectSubset<T, RoadmapCreateArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roadmaps.
     * @param {RoadmapCreateManyArgs} args - Arguments to create many Roadmaps.
     * @example
     * // Create many Roadmaps
     * const roadmap = await prisma.roadmap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoadmapCreateManyArgs>(args?: SelectSubset<T, RoadmapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roadmaps and returns the data saved in the database.
     * @param {RoadmapCreateManyAndReturnArgs} args - Arguments to create many Roadmaps.
     * @example
     * // Create many Roadmaps
     * const roadmap = await prisma.roadmap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roadmaps and only return the `id`
     * const roadmapWithIdOnly = await prisma.roadmap.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoadmapCreateManyAndReturnArgs>(args?: SelectSubset<T, RoadmapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Roadmap.
     * @param {RoadmapDeleteArgs} args - Arguments to delete one Roadmap.
     * @example
     * // Delete one Roadmap
     * const Roadmap = await prisma.roadmap.delete({
     *   where: {
     *     // ... filter to delete one Roadmap
     *   }
     * })
     * 
     */
    delete<T extends RoadmapDeleteArgs>(args: SelectSubset<T, RoadmapDeleteArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Roadmap.
     * @param {RoadmapUpdateArgs} args - Arguments to update one Roadmap.
     * @example
     * // Update one Roadmap
     * const roadmap = await prisma.roadmap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoadmapUpdateArgs>(args: SelectSubset<T, RoadmapUpdateArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roadmaps.
     * @param {RoadmapDeleteManyArgs} args - Arguments to filter Roadmaps to delete.
     * @example
     * // Delete a few Roadmaps
     * const { count } = await prisma.roadmap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoadmapDeleteManyArgs>(args?: SelectSubset<T, RoadmapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roadmaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roadmaps
     * const roadmap = await prisma.roadmap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoadmapUpdateManyArgs>(args: SelectSubset<T, RoadmapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roadmaps and returns the data updated in the database.
     * @param {RoadmapUpdateManyAndReturnArgs} args - Arguments to update many Roadmaps.
     * @example
     * // Update many Roadmaps
     * const roadmap = await prisma.roadmap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roadmaps and only return the `id`
     * const roadmapWithIdOnly = await prisma.roadmap.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoadmapUpdateManyAndReturnArgs>(args: SelectSubset<T, RoadmapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Roadmap.
     * @param {RoadmapUpsertArgs} args - Arguments to update or create a Roadmap.
     * @example
     * // Update or create a Roadmap
     * const roadmap = await prisma.roadmap.upsert({
     *   create: {
     *     // ... data to create a Roadmap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roadmap we want to update
     *   }
     * })
     */
    upsert<T extends RoadmapUpsertArgs>(args: SelectSubset<T, RoadmapUpsertArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roadmaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapCountArgs} args - Arguments to filter Roadmaps to count.
     * @example
     * // Count the number of Roadmaps
     * const count = await prisma.roadmap.count({
     *   where: {
     *     // ... the filter for the Roadmaps we want to count
     *   }
     * })
    **/
    count<T extends RoadmapCountArgs>(
      args?: Subset<T, RoadmapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoadmapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roadmap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoadmapAggregateArgs>(args: Subset<T, RoadmapAggregateArgs>): Prisma.PrismaPromise<GetRoadmapAggregateType<T>>

    /**
     * Group by Roadmap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoadmapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoadmapGroupByArgs['orderBy'] }
        : { orderBy?: RoadmapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoadmapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoadmapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Roadmap model
   */
  readonly fields: RoadmapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Roadmap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoadmapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nodes<T extends Roadmap$nodesArgs<ExtArgs> = {}>(args?: Subset<T, Roadmap$nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    edges<T extends Roadmap$edgesArgs<ExtArgs> = {}>(args?: Subset<T, Roadmap$edgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Roadmap model
   */
  interface RoadmapFieldRefs {
    readonly id: FieldRef<"Roadmap", 'String'>
    readonly title: FieldRef<"Roadmap", 'String'>
    readonly description: FieldRef<"Roadmap", 'String'>
    readonly category: FieldRef<"Roadmap", 'String'>
    readonly imageUrl: FieldRef<"Roadmap", 'String'>
    readonly createdAt: FieldRef<"Roadmap", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Roadmap findUnique
   */
  export type RoadmapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * Filter, which Roadmap to fetch.
     */
    where: RoadmapWhereUniqueInput
  }

  /**
   * Roadmap findUniqueOrThrow
   */
  export type RoadmapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * Filter, which Roadmap to fetch.
     */
    where: RoadmapWhereUniqueInput
  }

  /**
   * Roadmap findFirst
   */
  export type RoadmapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * Filter, which Roadmap to fetch.
     */
    where?: RoadmapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roadmaps to fetch.
     */
    orderBy?: RoadmapOrderByWithRelationInput | RoadmapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roadmaps.
     */
    cursor?: RoadmapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roadmaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roadmaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roadmaps.
     */
    distinct?: RoadmapScalarFieldEnum | RoadmapScalarFieldEnum[]
  }

  /**
   * Roadmap findFirstOrThrow
   */
  export type RoadmapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * Filter, which Roadmap to fetch.
     */
    where?: RoadmapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roadmaps to fetch.
     */
    orderBy?: RoadmapOrderByWithRelationInput | RoadmapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roadmaps.
     */
    cursor?: RoadmapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roadmaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roadmaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roadmaps.
     */
    distinct?: RoadmapScalarFieldEnum | RoadmapScalarFieldEnum[]
  }

  /**
   * Roadmap findMany
   */
  export type RoadmapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * Filter, which Roadmaps to fetch.
     */
    where?: RoadmapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roadmaps to fetch.
     */
    orderBy?: RoadmapOrderByWithRelationInput | RoadmapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roadmaps.
     */
    cursor?: RoadmapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roadmaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roadmaps.
     */
    skip?: number
    distinct?: RoadmapScalarFieldEnum | RoadmapScalarFieldEnum[]
  }

  /**
   * Roadmap create
   */
  export type RoadmapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * The data needed to create a Roadmap.
     */
    data: XOR<RoadmapCreateInput, RoadmapUncheckedCreateInput>
  }

  /**
   * Roadmap createMany
   */
  export type RoadmapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roadmaps.
     */
    data: RoadmapCreateManyInput | RoadmapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Roadmap createManyAndReturn
   */
  export type RoadmapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * The data used to create many Roadmaps.
     */
    data: RoadmapCreateManyInput | RoadmapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Roadmap update
   */
  export type RoadmapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * The data needed to update a Roadmap.
     */
    data: XOR<RoadmapUpdateInput, RoadmapUncheckedUpdateInput>
    /**
     * Choose, which Roadmap to update.
     */
    where: RoadmapWhereUniqueInput
  }

  /**
   * Roadmap updateMany
   */
  export type RoadmapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roadmaps.
     */
    data: XOR<RoadmapUpdateManyMutationInput, RoadmapUncheckedUpdateManyInput>
    /**
     * Filter which Roadmaps to update
     */
    where?: RoadmapWhereInput
    /**
     * Limit how many Roadmaps to update.
     */
    limit?: number
  }

  /**
   * Roadmap updateManyAndReturn
   */
  export type RoadmapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * The data used to update Roadmaps.
     */
    data: XOR<RoadmapUpdateManyMutationInput, RoadmapUncheckedUpdateManyInput>
    /**
     * Filter which Roadmaps to update
     */
    where?: RoadmapWhereInput
    /**
     * Limit how many Roadmaps to update.
     */
    limit?: number
  }

  /**
   * Roadmap upsert
   */
  export type RoadmapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * The filter to search for the Roadmap to update in case it exists.
     */
    where: RoadmapWhereUniqueInput
    /**
     * In case the Roadmap found by the `where` argument doesn't exist, create a new Roadmap with this data.
     */
    create: XOR<RoadmapCreateInput, RoadmapUncheckedCreateInput>
    /**
     * In case the Roadmap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoadmapUpdateInput, RoadmapUncheckedUpdateInput>
  }

  /**
   * Roadmap delete
   */
  export type RoadmapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
    /**
     * Filter which Roadmap to delete.
     */
    where: RoadmapWhereUniqueInput
  }

  /**
   * Roadmap deleteMany
   */
  export type RoadmapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roadmaps to delete
     */
    where?: RoadmapWhereInput
    /**
     * Limit how many Roadmaps to delete.
     */
    limit?: number
  }

  /**
   * Roadmap.nodes
   */
  export type Roadmap$nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    where?: RoadmapNodeWhereInput
    orderBy?: RoadmapNodeOrderByWithRelationInput | RoadmapNodeOrderByWithRelationInput[]
    cursor?: RoadmapNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadmapNodeScalarFieldEnum | RoadmapNodeScalarFieldEnum[]
  }

  /**
   * Roadmap.edges
   */
  export type Roadmap$edgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    where?: RoadmapEdgeWhereInput
    orderBy?: RoadmapEdgeOrderByWithRelationInput | RoadmapEdgeOrderByWithRelationInput[]
    cursor?: RoadmapEdgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadmapEdgeScalarFieldEnum | RoadmapEdgeScalarFieldEnum[]
  }

  /**
   * Roadmap without action
   */
  export type RoadmapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roadmap
     */
    select?: RoadmapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roadmap
     */
    omit?: RoadmapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapInclude<ExtArgs> | null
  }


  /**
   * Model RoadmapNode
   */

  export type AggregateRoadmapNode = {
    _count: RoadmapNodeCountAggregateOutputType | null
    _avg: RoadmapNodeAvgAggregateOutputType | null
    _sum: RoadmapNodeSumAggregateOutputType | null
    _min: RoadmapNodeMinAggregateOutputType | null
    _max: RoadmapNodeMaxAggregateOutputType | null
  }

  export type RoadmapNodeAvgAggregateOutputType = {
    positionX: number | null
    positionY: number | null
  }

  export type RoadmapNodeSumAggregateOutputType = {
    positionX: number | null
    positionY: number | null
  }

  export type RoadmapNodeMinAggregateOutputType = {
    id: string | null
    roadmapId: string | null
    label: string | null
    description: string | null
    type: string | null
    positionX: number | null
    positionY: number | null
  }

  export type RoadmapNodeMaxAggregateOutputType = {
    id: string | null
    roadmapId: string | null
    label: string | null
    description: string | null
    type: string | null
    positionX: number | null
    positionY: number | null
  }

  export type RoadmapNodeCountAggregateOutputType = {
    id: number
    roadmapId: number
    label: number
    description: number
    type: number
    positionX: number
    positionY: number
    _all: number
  }


  export type RoadmapNodeAvgAggregateInputType = {
    positionX?: true
    positionY?: true
  }

  export type RoadmapNodeSumAggregateInputType = {
    positionX?: true
    positionY?: true
  }

  export type RoadmapNodeMinAggregateInputType = {
    id?: true
    roadmapId?: true
    label?: true
    description?: true
    type?: true
    positionX?: true
    positionY?: true
  }

  export type RoadmapNodeMaxAggregateInputType = {
    id?: true
    roadmapId?: true
    label?: true
    description?: true
    type?: true
    positionX?: true
    positionY?: true
  }

  export type RoadmapNodeCountAggregateInputType = {
    id?: true
    roadmapId?: true
    label?: true
    description?: true
    type?: true
    positionX?: true
    positionY?: true
    _all?: true
  }

  export type RoadmapNodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapNode to aggregate.
     */
    where?: RoadmapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapNodes to fetch.
     */
    orderBy?: RoadmapNodeOrderByWithRelationInput | RoadmapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoadmapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoadmapNodes
    **/
    _count?: true | RoadmapNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoadmapNodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoadmapNodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoadmapNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoadmapNodeMaxAggregateInputType
  }

  export type GetRoadmapNodeAggregateType<T extends RoadmapNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateRoadmapNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoadmapNode[P]>
      : GetScalarType<T[P], AggregateRoadmapNode[P]>
  }




  export type RoadmapNodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapNodeWhereInput
    orderBy?: RoadmapNodeOrderByWithAggregationInput | RoadmapNodeOrderByWithAggregationInput[]
    by: RoadmapNodeScalarFieldEnum[] | RoadmapNodeScalarFieldEnum
    having?: RoadmapNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoadmapNodeCountAggregateInputType | true
    _avg?: RoadmapNodeAvgAggregateInputType
    _sum?: RoadmapNodeSumAggregateInputType
    _min?: RoadmapNodeMinAggregateInputType
    _max?: RoadmapNodeMaxAggregateInputType
  }

  export type RoadmapNodeGroupByOutputType = {
    id: string
    roadmapId: string
    label: string
    description: string | null
    type: string
    positionX: number | null
    positionY: number | null
    _count: RoadmapNodeCountAggregateOutputType | null
    _avg: RoadmapNodeAvgAggregateOutputType | null
    _sum: RoadmapNodeSumAggregateOutputType | null
    _min: RoadmapNodeMinAggregateOutputType | null
    _max: RoadmapNodeMaxAggregateOutputType | null
  }

  type GetRoadmapNodeGroupByPayload<T extends RoadmapNodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoadmapNodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoadmapNodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoadmapNodeGroupByOutputType[P]>
            : GetScalarType<T[P], RoadmapNodeGroupByOutputType[P]>
        }
      >
    >


  export type RoadmapNodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roadmapId?: boolean
    label?: boolean
    description?: boolean
    type?: boolean
    positionX?: boolean
    positionY?: boolean
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    edgesSource?: boolean | RoadmapNode$edgesSourceArgs<ExtArgs>
    edgesTarget?: boolean | RoadmapNode$edgesTargetArgs<ExtArgs>
    exercises?: boolean | RoadmapNode$exercisesArgs<ExtArgs>
    _count?: boolean | RoadmapNodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapNode"]>

  export type RoadmapNodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roadmapId?: boolean
    label?: boolean
    description?: boolean
    type?: boolean
    positionX?: boolean
    positionY?: boolean
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapNode"]>

  export type RoadmapNodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roadmapId?: boolean
    label?: boolean
    description?: boolean
    type?: boolean
    positionX?: boolean
    positionY?: boolean
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapNode"]>

  export type RoadmapNodeSelectScalar = {
    id?: boolean
    roadmapId?: boolean
    label?: boolean
    description?: boolean
    type?: boolean
    positionX?: boolean
    positionY?: boolean
  }

  export type RoadmapNodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roadmapId" | "label" | "description" | "type" | "positionX" | "positionY", ExtArgs["result"]["roadmapNode"]>
  export type RoadmapNodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    edgesSource?: boolean | RoadmapNode$edgesSourceArgs<ExtArgs>
    edgesTarget?: boolean | RoadmapNode$edgesTargetArgs<ExtArgs>
    exercises?: boolean | RoadmapNode$exercisesArgs<ExtArgs>
    _count?: boolean | RoadmapNodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoadmapNodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
  }
  export type RoadmapNodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
  }

  export type $RoadmapNodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoadmapNode"
    objects: {
      roadmap: Prisma.$RoadmapPayload<ExtArgs>
      edgesSource: Prisma.$RoadmapEdgePayload<ExtArgs>[]
      edgesTarget: Prisma.$RoadmapEdgePayload<ExtArgs>[]
      exercises: Prisma.$NodeExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roadmapId: string
      label: string
      description: string | null
      type: string
      positionX: number | null
      positionY: number | null
    }, ExtArgs["result"]["roadmapNode"]>
    composites: {}
  }

  type RoadmapNodeGetPayload<S extends boolean | null | undefined | RoadmapNodeDefaultArgs> = $Result.GetResult<Prisma.$RoadmapNodePayload, S>

  type RoadmapNodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoadmapNodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoadmapNodeCountAggregateInputType | true
    }

  export interface RoadmapNodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoadmapNode'], meta: { name: 'RoadmapNode' } }
    /**
     * Find zero or one RoadmapNode that matches the filter.
     * @param {RoadmapNodeFindUniqueArgs} args - Arguments to find a RoadmapNode
     * @example
     * // Get one RoadmapNode
     * const roadmapNode = await prisma.roadmapNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoadmapNodeFindUniqueArgs>(args: SelectSubset<T, RoadmapNodeFindUniqueArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoadmapNode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoadmapNodeFindUniqueOrThrowArgs} args - Arguments to find a RoadmapNode
     * @example
     * // Get one RoadmapNode
     * const roadmapNode = await prisma.roadmapNode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoadmapNodeFindUniqueOrThrowArgs>(args: SelectSubset<T, RoadmapNodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoadmapNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapNodeFindFirstArgs} args - Arguments to find a RoadmapNode
     * @example
     * // Get one RoadmapNode
     * const roadmapNode = await prisma.roadmapNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoadmapNodeFindFirstArgs>(args?: SelectSubset<T, RoadmapNodeFindFirstArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoadmapNode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapNodeFindFirstOrThrowArgs} args - Arguments to find a RoadmapNode
     * @example
     * // Get one RoadmapNode
     * const roadmapNode = await prisma.roadmapNode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoadmapNodeFindFirstOrThrowArgs>(args?: SelectSubset<T, RoadmapNodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoadmapNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapNodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoadmapNodes
     * const roadmapNodes = await prisma.roadmapNode.findMany()
     * 
     * // Get first 10 RoadmapNodes
     * const roadmapNodes = await prisma.roadmapNode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roadmapNodeWithIdOnly = await prisma.roadmapNode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoadmapNodeFindManyArgs>(args?: SelectSubset<T, RoadmapNodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoadmapNode.
     * @param {RoadmapNodeCreateArgs} args - Arguments to create a RoadmapNode.
     * @example
     * // Create one RoadmapNode
     * const RoadmapNode = await prisma.roadmapNode.create({
     *   data: {
     *     // ... data to create a RoadmapNode
     *   }
     * })
     * 
     */
    create<T extends RoadmapNodeCreateArgs>(args: SelectSubset<T, RoadmapNodeCreateArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoadmapNodes.
     * @param {RoadmapNodeCreateManyArgs} args - Arguments to create many RoadmapNodes.
     * @example
     * // Create many RoadmapNodes
     * const roadmapNode = await prisma.roadmapNode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoadmapNodeCreateManyArgs>(args?: SelectSubset<T, RoadmapNodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoadmapNodes and returns the data saved in the database.
     * @param {RoadmapNodeCreateManyAndReturnArgs} args - Arguments to create many RoadmapNodes.
     * @example
     * // Create many RoadmapNodes
     * const roadmapNode = await prisma.roadmapNode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoadmapNodes and only return the `id`
     * const roadmapNodeWithIdOnly = await prisma.roadmapNode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoadmapNodeCreateManyAndReturnArgs>(args?: SelectSubset<T, RoadmapNodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoadmapNode.
     * @param {RoadmapNodeDeleteArgs} args - Arguments to delete one RoadmapNode.
     * @example
     * // Delete one RoadmapNode
     * const RoadmapNode = await prisma.roadmapNode.delete({
     *   where: {
     *     // ... filter to delete one RoadmapNode
     *   }
     * })
     * 
     */
    delete<T extends RoadmapNodeDeleteArgs>(args: SelectSubset<T, RoadmapNodeDeleteArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoadmapNode.
     * @param {RoadmapNodeUpdateArgs} args - Arguments to update one RoadmapNode.
     * @example
     * // Update one RoadmapNode
     * const roadmapNode = await prisma.roadmapNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoadmapNodeUpdateArgs>(args: SelectSubset<T, RoadmapNodeUpdateArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoadmapNodes.
     * @param {RoadmapNodeDeleteManyArgs} args - Arguments to filter RoadmapNodes to delete.
     * @example
     * // Delete a few RoadmapNodes
     * const { count } = await prisma.roadmapNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoadmapNodeDeleteManyArgs>(args?: SelectSubset<T, RoadmapNodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadmapNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoadmapNodes
     * const roadmapNode = await prisma.roadmapNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoadmapNodeUpdateManyArgs>(args: SelectSubset<T, RoadmapNodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadmapNodes and returns the data updated in the database.
     * @param {RoadmapNodeUpdateManyAndReturnArgs} args - Arguments to update many RoadmapNodes.
     * @example
     * // Update many RoadmapNodes
     * const roadmapNode = await prisma.roadmapNode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoadmapNodes and only return the `id`
     * const roadmapNodeWithIdOnly = await prisma.roadmapNode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoadmapNodeUpdateManyAndReturnArgs>(args: SelectSubset<T, RoadmapNodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoadmapNode.
     * @param {RoadmapNodeUpsertArgs} args - Arguments to update or create a RoadmapNode.
     * @example
     * // Update or create a RoadmapNode
     * const roadmapNode = await prisma.roadmapNode.upsert({
     *   create: {
     *     // ... data to create a RoadmapNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoadmapNode we want to update
     *   }
     * })
     */
    upsert<T extends RoadmapNodeUpsertArgs>(args: SelectSubset<T, RoadmapNodeUpsertArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoadmapNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapNodeCountArgs} args - Arguments to filter RoadmapNodes to count.
     * @example
     * // Count the number of RoadmapNodes
     * const count = await prisma.roadmapNode.count({
     *   where: {
     *     // ... the filter for the RoadmapNodes we want to count
     *   }
     * })
    **/
    count<T extends RoadmapNodeCountArgs>(
      args?: Subset<T, RoadmapNodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoadmapNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoadmapNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoadmapNodeAggregateArgs>(args: Subset<T, RoadmapNodeAggregateArgs>): Prisma.PrismaPromise<GetRoadmapNodeAggregateType<T>>

    /**
     * Group by RoadmapNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoadmapNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoadmapNodeGroupByArgs['orderBy'] }
        : { orderBy?: RoadmapNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoadmapNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoadmapNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoadmapNode model
   */
  readonly fields: RoadmapNodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoadmapNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoadmapNodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roadmap<T extends RoadmapDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapDefaultArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    edgesSource<T extends RoadmapNode$edgesSourceArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapNode$edgesSourceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    edgesTarget<T extends RoadmapNode$edgesTargetArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapNode$edgesTargetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exercises<T extends RoadmapNode$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapNode$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoadmapNode model
   */
  interface RoadmapNodeFieldRefs {
    readonly id: FieldRef<"RoadmapNode", 'String'>
    readonly roadmapId: FieldRef<"RoadmapNode", 'String'>
    readonly label: FieldRef<"RoadmapNode", 'String'>
    readonly description: FieldRef<"RoadmapNode", 'String'>
    readonly type: FieldRef<"RoadmapNode", 'String'>
    readonly positionX: FieldRef<"RoadmapNode", 'Int'>
    readonly positionY: FieldRef<"RoadmapNode", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RoadmapNode findUnique
   */
  export type RoadmapNodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapNode to fetch.
     */
    where: RoadmapNodeWhereUniqueInput
  }

  /**
   * RoadmapNode findUniqueOrThrow
   */
  export type RoadmapNodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapNode to fetch.
     */
    where: RoadmapNodeWhereUniqueInput
  }

  /**
   * RoadmapNode findFirst
   */
  export type RoadmapNodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapNode to fetch.
     */
    where?: RoadmapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapNodes to fetch.
     */
    orderBy?: RoadmapNodeOrderByWithRelationInput | RoadmapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapNodes.
     */
    cursor?: RoadmapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapNodes.
     */
    distinct?: RoadmapNodeScalarFieldEnum | RoadmapNodeScalarFieldEnum[]
  }

  /**
   * RoadmapNode findFirstOrThrow
   */
  export type RoadmapNodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapNode to fetch.
     */
    where?: RoadmapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapNodes to fetch.
     */
    orderBy?: RoadmapNodeOrderByWithRelationInput | RoadmapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapNodes.
     */
    cursor?: RoadmapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapNodes.
     */
    distinct?: RoadmapNodeScalarFieldEnum | RoadmapNodeScalarFieldEnum[]
  }

  /**
   * RoadmapNode findMany
   */
  export type RoadmapNodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapNodes to fetch.
     */
    where?: RoadmapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapNodes to fetch.
     */
    orderBy?: RoadmapNodeOrderByWithRelationInput | RoadmapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoadmapNodes.
     */
    cursor?: RoadmapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapNodes.
     */
    skip?: number
    distinct?: RoadmapNodeScalarFieldEnum | RoadmapNodeScalarFieldEnum[]
  }

  /**
   * RoadmapNode create
   */
  export type RoadmapNodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * The data needed to create a RoadmapNode.
     */
    data: XOR<RoadmapNodeCreateInput, RoadmapNodeUncheckedCreateInput>
  }

  /**
   * RoadmapNode createMany
   */
  export type RoadmapNodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoadmapNodes.
     */
    data: RoadmapNodeCreateManyInput | RoadmapNodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoadmapNode createManyAndReturn
   */
  export type RoadmapNodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * The data used to create many RoadmapNodes.
     */
    data: RoadmapNodeCreateManyInput | RoadmapNodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoadmapNode update
   */
  export type RoadmapNodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * The data needed to update a RoadmapNode.
     */
    data: XOR<RoadmapNodeUpdateInput, RoadmapNodeUncheckedUpdateInput>
    /**
     * Choose, which RoadmapNode to update.
     */
    where: RoadmapNodeWhereUniqueInput
  }

  /**
   * RoadmapNode updateMany
   */
  export type RoadmapNodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoadmapNodes.
     */
    data: XOR<RoadmapNodeUpdateManyMutationInput, RoadmapNodeUncheckedUpdateManyInput>
    /**
     * Filter which RoadmapNodes to update
     */
    where?: RoadmapNodeWhereInput
    /**
     * Limit how many RoadmapNodes to update.
     */
    limit?: number
  }

  /**
   * RoadmapNode updateManyAndReturn
   */
  export type RoadmapNodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * The data used to update RoadmapNodes.
     */
    data: XOR<RoadmapNodeUpdateManyMutationInput, RoadmapNodeUncheckedUpdateManyInput>
    /**
     * Filter which RoadmapNodes to update
     */
    where?: RoadmapNodeWhereInput
    /**
     * Limit how many RoadmapNodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoadmapNode upsert
   */
  export type RoadmapNodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * The filter to search for the RoadmapNode to update in case it exists.
     */
    where: RoadmapNodeWhereUniqueInput
    /**
     * In case the RoadmapNode found by the `where` argument doesn't exist, create a new RoadmapNode with this data.
     */
    create: XOR<RoadmapNodeCreateInput, RoadmapNodeUncheckedCreateInput>
    /**
     * In case the RoadmapNode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoadmapNodeUpdateInput, RoadmapNodeUncheckedUpdateInput>
  }

  /**
   * RoadmapNode delete
   */
  export type RoadmapNodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
    /**
     * Filter which RoadmapNode to delete.
     */
    where: RoadmapNodeWhereUniqueInput
  }

  /**
   * RoadmapNode deleteMany
   */
  export type RoadmapNodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapNodes to delete
     */
    where?: RoadmapNodeWhereInput
    /**
     * Limit how many RoadmapNodes to delete.
     */
    limit?: number
  }

  /**
   * RoadmapNode.edgesSource
   */
  export type RoadmapNode$edgesSourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    where?: RoadmapEdgeWhereInput
    orderBy?: RoadmapEdgeOrderByWithRelationInput | RoadmapEdgeOrderByWithRelationInput[]
    cursor?: RoadmapEdgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadmapEdgeScalarFieldEnum | RoadmapEdgeScalarFieldEnum[]
  }

  /**
   * RoadmapNode.edgesTarget
   */
  export type RoadmapNode$edgesTargetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    where?: RoadmapEdgeWhereInput
    orderBy?: RoadmapEdgeOrderByWithRelationInput | RoadmapEdgeOrderByWithRelationInput[]
    cursor?: RoadmapEdgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoadmapEdgeScalarFieldEnum | RoadmapEdgeScalarFieldEnum[]
  }

  /**
   * RoadmapNode.exercises
   */
  export type RoadmapNode$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    where?: NodeExerciseWhereInput
    orderBy?: NodeExerciseOrderByWithRelationInput | NodeExerciseOrderByWithRelationInput[]
    cursor?: NodeExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeExerciseScalarFieldEnum | NodeExerciseScalarFieldEnum[]
  }

  /**
   * RoadmapNode without action
   */
  export type RoadmapNodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapNode
     */
    select?: RoadmapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapNode
     */
    omit?: RoadmapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapNodeInclude<ExtArgs> | null
  }


  /**
   * Model RoadmapEdge
   */

  export type AggregateRoadmapEdge = {
    _count: RoadmapEdgeCountAggregateOutputType | null
    _min: RoadmapEdgeMinAggregateOutputType | null
    _max: RoadmapEdgeMaxAggregateOutputType | null
  }

  export type RoadmapEdgeMinAggregateOutputType = {
    id: string | null
    roadmapId: string | null
    sourceNodeId: string | null
    targetNodeId: string | null
  }

  export type RoadmapEdgeMaxAggregateOutputType = {
    id: string | null
    roadmapId: string | null
    sourceNodeId: string | null
    targetNodeId: string | null
  }

  export type RoadmapEdgeCountAggregateOutputType = {
    id: number
    roadmapId: number
    sourceNodeId: number
    targetNodeId: number
    _all: number
  }


  export type RoadmapEdgeMinAggregateInputType = {
    id?: true
    roadmapId?: true
    sourceNodeId?: true
    targetNodeId?: true
  }

  export type RoadmapEdgeMaxAggregateInputType = {
    id?: true
    roadmapId?: true
    sourceNodeId?: true
    targetNodeId?: true
  }

  export type RoadmapEdgeCountAggregateInputType = {
    id?: true
    roadmapId?: true
    sourceNodeId?: true
    targetNodeId?: true
    _all?: true
  }

  export type RoadmapEdgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapEdge to aggregate.
     */
    where?: RoadmapEdgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapEdges to fetch.
     */
    orderBy?: RoadmapEdgeOrderByWithRelationInput | RoadmapEdgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoadmapEdgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapEdges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapEdges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoadmapEdges
    **/
    _count?: true | RoadmapEdgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoadmapEdgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoadmapEdgeMaxAggregateInputType
  }

  export type GetRoadmapEdgeAggregateType<T extends RoadmapEdgeAggregateArgs> = {
        [P in keyof T & keyof AggregateRoadmapEdge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoadmapEdge[P]>
      : GetScalarType<T[P], AggregateRoadmapEdge[P]>
  }




  export type RoadmapEdgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoadmapEdgeWhereInput
    orderBy?: RoadmapEdgeOrderByWithAggregationInput | RoadmapEdgeOrderByWithAggregationInput[]
    by: RoadmapEdgeScalarFieldEnum[] | RoadmapEdgeScalarFieldEnum
    having?: RoadmapEdgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoadmapEdgeCountAggregateInputType | true
    _min?: RoadmapEdgeMinAggregateInputType
    _max?: RoadmapEdgeMaxAggregateInputType
  }

  export type RoadmapEdgeGroupByOutputType = {
    id: string
    roadmapId: string
    sourceNodeId: string
    targetNodeId: string
    _count: RoadmapEdgeCountAggregateOutputType | null
    _min: RoadmapEdgeMinAggregateOutputType | null
    _max: RoadmapEdgeMaxAggregateOutputType | null
  }

  type GetRoadmapEdgeGroupByPayload<T extends RoadmapEdgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoadmapEdgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoadmapEdgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoadmapEdgeGroupByOutputType[P]>
            : GetScalarType<T[P], RoadmapEdgeGroupByOutputType[P]>
        }
      >
    >


  export type RoadmapEdgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roadmapId?: boolean
    sourceNodeId?: boolean
    targetNodeId?: boolean
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    sourceNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    targetNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapEdge"]>

  export type RoadmapEdgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roadmapId?: boolean
    sourceNodeId?: boolean
    targetNodeId?: boolean
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    sourceNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    targetNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapEdge"]>

  export type RoadmapEdgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roadmapId?: boolean
    sourceNodeId?: boolean
    targetNodeId?: boolean
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    sourceNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    targetNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roadmapEdge"]>

  export type RoadmapEdgeSelectScalar = {
    id?: boolean
    roadmapId?: boolean
    sourceNodeId?: boolean
    targetNodeId?: boolean
  }

  export type RoadmapEdgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roadmapId" | "sourceNodeId" | "targetNodeId", ExtArgs["result"]["roadmapEdge"]>
  export type RoadmapEdgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    sourceNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    targetNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
  }
  export type RoadmapEdgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    sourceNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    targetNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
  }
  export type RoadmapEdgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roadmap?: boolean | RoadmapDefaultArgs<ExtArgs>
    sourceNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    targetNode?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
  }

  export type $RoadmapEdgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoadmapEdge"
    objects: {
      roadmap: Prisma.$RoadmapPayload<ExtArgs>
      sourceNode: Prisma.$RoadmapNodePayload<ExtArgs>
      targetNode: Prisma.$RoadmapNodePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roadmapId: string
      sourceNodeId: string
      targetNodeId: string
    }, ExtArgs["result"]["roadmapEdge"]>
    composites: {}
  }

  type RoadmapEdgeGetPayload<S extends boolean | null | undefined | RoadmapEdgeDefaultArgs> = $Result.GetResult<Prisma.$RoadmapEdgePayload, S>

  type RoadmapEdgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoadmapEdgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoadmapEdgeCountAggregateInputType | true
    }

  export interface RoadmapEdgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoadmapEdge'], meta: { name: 'RoadmapEdge' } }
    /**
     * Find zero or one RoadmapEdge that matches the filter.
     * @param {RoadmapEdgeFindUniqueArgs} args - Arguments to find a RoadmapEdge
     * @example
     * // Get one RoadmapEdge
     * const roadmapEdge = await prisma.roadmapEdge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoadmapEdgeFindUniqueArgs>(args: SelectSubset<T, RoadmapEdgeFindUniqueArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoadmapEdge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoadmapEdgeFindUniqueOrThrowArgs} args - Arguments to find a RoadmapEdge
     * @example
     * // Get one RoadmapEdge
     * const roadmapEdge = await prisma.roadmapEdge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoadmapEdgeFindUniqueOrThrowArgs>(args: SelectSubset<T, RoadmapEdgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoadmapEdge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapEdgeFindFirstArgs} args - Arguments to find a RoadmapEdge
     * @example
     * // Get one RoadmapEdge
     * const roadmapEdge = await prisma.roadmapEdge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoadmapEdgeFindFirstArgs>(args?: SelectSubset<T, RoadmapEdgeFindFirstArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoadmapEdge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapEdgeFindFirstOrThrowArgs} args - Arguments to find a RoadmapEdge
     * @example
     * // Get one RoadmapEdge
     * const roadmapEdge = await prisma.roadmapEdge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoadmapEdgeFindFirstOrThrowArgs>(args?: SelectSubset<T, RoadmapEdgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoadmapEdges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapEdgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoadmapEdges
     * const roadmapEdges = await prisma.roadmapEdge.findMany()
     * 
     * // Get first 10 RoadmapEdges
     * const roadmapEdges = await prisma.roadmapEdge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roadmapEdgeWithIdOnly = await prisma.roadmapEdge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoadmapEdgeFindManyArgs>(args?: SelectSubset<T, RoadmapEdgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoadmapEdge.
     * @param {RoadmapEdgeCreateArgs} args - Arguments to create a RoadmapEdge.
     * @example
     * // Create one RoadmapEdge
     * const RoadmapEdge = await prisma.roadmapEdge.create({
     *   data: {
     *     // ... data to create a RoadmapEdge
     *   }
     * })
     * 
     */
    create<T extends RoadmapEdgeCreateArgs>(args: SelectSubset<T, RoadmapEdgeCreateArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoadmapEdges.
     * @param {RoadmapEdgeCreateManyArgs} args - Arguments to create many RoadmapEdges.
     * @example
     * // Create many RoadmapEdges
     * const roadmapEdge = await prisma.roadmapEdge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoadmapEdgeCreateManyArgs>(args?: SelectSubset<T, RoadmapEdgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoadmapEdges and returns the data saved in the database.
     * @param {RoadmapEdgeCreateManyAndReturnArgs} args - Arguments to create many RoadmapEdges.
     * @example
     * // Create many RoadmapEdges
     * const roadmapEdge = await prisma.roadmapEdge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoadmapEdges and only return the `id`
     * const roadmapEdgeWithIdOnly = await prisma.roadmapEdge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoadmapEdgeCreateManyAndReturnArgs>(args?: SelectSubset<T, RoadmapEdgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoadmapEdge.
     * @param {RoadmapEdgeDeleteArgs} args - Arguments to delete one RoadmapEdge.
     * @example
     * // Delete one RoadmapEdge
     * const RoadmapEdge = await prisma.roadmapEdge.delete({
     *   where: {
     *     // ... filter to delete one RoadmapEdge
     *   }
     * })
     * 
     */
    delete<T extends RoadmapEdgeDeleteArgs>(args: SelectSubset<T, RoadmapEdgeDeleteArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoadmapEdge.
     * @param {RoadmapEdgeUpdateArgs} args - Arguments to update one RoadmapEdge.
     * @example
     * // Update one RoadmapEdge
     * const roadmapEdge = await prisma.roadmapEdge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoadmapEdgeUpdateArgs>(args: SelectSubset<T, RoadmapEdgeUpdateArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoadmapEdges.
     * @param {RoadmapEdgeDeleteManyArgs} args - Arguments to filter RoadmapEdges to delete.
     * @example
     * // Delete a few RoadmapEdges
     * const { count } = await prisma.roadmapEdge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoadmapEdgeDeleteManyArgs>(args?: SelectSubset<T, RoadmapEdgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadmapEdges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapEdgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoadmapEdges
     * const roadmapEdge = await prisma.roadmapEdge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoadmapEdgeUpdateManyArgs>(args: SelectSubset<T, RoadmapEdgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoadmapEdges and returns the data updated in the database.
     * @param {RoadmapEdgeUpdateManyAndReturnArgs} args - Arguments to update many RoadmapEdges.
     * @example
     * // Update many RoadmapEdges
     * const roadmapEdge = await prisma.roadmapEdge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoadmapEdges and only return the `id`
     * const roadmapEdgeWithIdOnly = await prisma.roadmapEdge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoadmapEdgeUpdateManyAndReturnArgs>(args: SelectSubset<T, RoadmapEdgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoadmapEdge.
     * @param {RoadmapEdgeUpsertArgs} args - Arguments to update or create a RoadmapEdge.
     * @example
     * // Update or create a RoadmapEdge
     * const roadmapEdge = await prisma.roadmapEdge.upsert({
     *   create: {
     *     // ... data to create a RoadmapEdge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoadmapEdge we want to update
     *   }
     * })
     */
    upsert<T extends RoadmapEdgeUpsertArgs>(args: SelectSubset<T, RoadmapEdgeUpsertArgs<ExtArgs>>): Prisma__RoadmapEdgeClient<$Result.GetResult<Prisma.$RoadmapEdgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoadmapEdges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapEdgeCountArgs} args - Arguments to filter RoadmapEdges to count.
     * @example
     * // Count the number of RoadmapEdges
     * const count = await prisma.roadmapEdge.count({
     *   where: {
     *     // ... the filter for the RoadmapEdges we want to count
     *   }
     * })
    **/
    count<T extends RoadmapEdgeCountArgs>(
      args?: Subset<T, RoadmapEdgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoadmapEdgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoadmapEdge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapEdgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoadmapEdgeAggregateArgs>(args: Subset<T, RoadmapEdgeAggregateArgs>): Prisma.PrismaPromise<GetRoadmapEdgeAggregateType<T>>

    /**
     * Group by RoadmapEdge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoadmapEdgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoadmapEdgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoadmapEdgeGroupByArgs['orderBy'] }
        : { orderBy?: RoadmapEdgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoadmapEdgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoadmapEdgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoadmapEdge model
   */
  readonly fields: RoadmapEdgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoadmapEdge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoadmapEdgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roadmap<T extends RoadmapDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapDefaultArgs<ExtArgs>>): Prisma__RoadmapClient<$Result.GetResult<Prisma.$RoadmapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sourceNode<T extends RoadmapNodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapNodeDefaultArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    targetNode<T extends RoadmapNodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapNodeDefaultArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoadmapEdge model
   */
  interface RoadmapEdgeFieldRefs {
    readonly id: FieldRef<"RoadmapEdge", 'String'>
    readonly roadmapId: FieldRef<"RoadmapEdge", 'String'>
    readonly sourceNodeId: FieldRef<"RoadmapEdge", 'String'>
    readonly targetNodeId: FieldRef<"RoadmapEdge", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RoadmapEdge findUnique
   */
  export type RoadmapEdgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapEdge to fetch.
     */
    where: RoadmapEdgeWhereUniqueInput
  }

  /**
   * RoadmapEdge findUniqueOrThrow
   */
  export type RoadmapEdgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapEdge to fetch.
     */
    where: RoadmapEdgeWhereUniqueInput
  }

  /**
   * RoadmapEdge findFirst
   */
  export type RoadmapEdgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapEdge to fetch.
     */
    where?: RoadmapEdgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapEdges to fetch.
     */
    orderBy?: RoadmapEdgeOrderByWithRelationInput | RoadmapEdgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapEdges.
     */
    cursor?: RoadmapEdgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapEdges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapEdges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapEdges.
     */
    distinct?: RoadmapEdgeScalarFieldEnum | RoadmapEdgeScalarFieldEnum[]
  }

  /**
   * RoadmapEdge findFirstOrThrow
   */
  export type RoadmapEdgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapEdge to fetch.
     */
    where?: RoadmapEdgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapEdges to fetch.
     */
    orderBy?: RoadmapEdgeOrderByWithRelationInput | RoadmapEdgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoadmapEdges.
     */
    cursor?: RoadmapEdgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapEdges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapEdges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoadmapEdges.
     */
    distinct?: RoadmapEdgeScalarFieldEnum | RoadmapEdgeScalarFieldEnum[]
  }

  /**
   * RoadmapEdge findMany
   */
  export type RoadmapEdgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * Filter, which RoadmapEdges to fetch.
     */
    where?: RoadmapEdgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoadmapEdges to fetch.
     */
    orderBy?: RoadmapEdgeOrderByWithRelationInput | RoadmapEdgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoadmapEdges.
     */
    cursor?: RoadmapEdgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoadmapEdges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoadmapEdges.
     */
    skip?: number
    distinct?: RoadmapEdgeScalarFieldEnum | RoadmapEdgeScalarFieldEnum[]
  }

  /**
   * RoadmapEdge create
   */
  export type RoadmapEdgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * The data needed to create a RoadmapEdge.
     */
    data: XOR<RoadmapEdgeCreateInput, RoadmapEdgeUncheckedCreateInput>
  }

  /**
   * RoadmapEdge createMany
   */
  export type RoadmapEdgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoadmapEdges.
     */
    data: RoadmapEdgeCreateManyInput | RoadmapEdgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoadmapEdge createManyAndReturn
   */
  export type RoadmapEdgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * The data used to create many RoadmapEdges.
     */
    data: RoadmapEdgeCreateManyInput | RoadmapEdgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoadmapEdge update
   */
  export type RoadmapEdgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * The data needed to update a RoadmapEdge.
     */
    data: XOR<RoadmapEdgeUpdateInput, RoadmapEdgeUncheckedUpdateInput>
    /**
     * Choose, which RoadmapEdge to update.
     */
    where: RoadmapEdgeWhereUniqueInput
  }

  /**
   * RoadmapEdge updateMany
   */
  export type RoadmapEdgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoadmapEdges.
     */
    data: XOR<RoadmapEdgeUpdateManyMutationInput, RoadmapEdgeUncheckedUpdateManyInput>
    /**
     * Filter which RoadmapEdges to update
     */
    where?: RoadmapEdgeWhereInput
    /**
     * Limit how many RoadmapEdges to update.
     */
    limit?: number
  }

  /**
   * RoadmapEdge updateManyAndReturn
   */
  export type RoadmapEdgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * The data used to update RoadmapEdges.
     */
    data: XOR<RoadmapEdgeUpdateManyMutationInput, RoadmapEdgeUncheckedUpdateManyInput>
    /**
     * Filter which RoadmapEdges to update
     */
    where?: RoadmapEdgeWhereInput
    /**
     * Limit how many RoadmapEdges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoadmapEdge upsert
   */
  export type RoadmapEdgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * The filter to search for the RoadmapEdge to update in case it exists.
     */
    where: RoadmapEdgeWhereUniqueInput
    /**
     * In case the RoadmapEdge found by the `where` argument doesn't exist, create a new RoadmapEdge with this data.
     */
    create: XOR<RoadmapEdgeCreateInput, RoadmapEdgeUncheckedCreateInput>
    /**
     * In case the RoadmapEdge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoadmapEdgeUpdateInput, RoadmapEdgeUncheckedUpdateInput>
  }

  /**
   * RoadmapEdge delete
   */
  export type RoadmapEdgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
    /**
     * Filter which RoadmapEdge to delete.
     */
    where: RoadmapEdgeWhereUniqueInput
  }

  /**
   * RoadmapEdge deleteMany
   */
  export type RoadmapEdgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoadmapEdges to delete
     */
    where?: RoadmapEdgeWhereInput
    /**
     * Limit how many RoadmapEdges to delete.
     */
    limit?: number
  }

  /**
   * RoadmapEdge without action
   */
  export type RoadmapEdgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoadmapEdge
     */
    select?: RoadmapEdgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoadmapEdge
     */
    omit?: RoadmapEdgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoadmapEdgeInclude<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: string | null
    name: string | null
    difficulty: string | null
    solution: string | null
    videoUrl: string | null
    description: string | null
    questionImageUrl: string | null
    type: string | null
    isActive: boolean | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    difficulty: string | null
    solution: string | null
    videoUrl: string | null
    description: string | null
    questionImageUrl: string | null
    type: string | null
    isActive: boolean | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    name: number
    difficulty: number
    hints: number
    solution: number
    videoUrl: number
    description: number
    questionImageUrl: number
    type: number
    isActive: number
    _all: number
  }


  export type ExerciseMinAggregateInputType = {
    id?: true
    name?: true
    difficulty?: true
    solution?: true
    videoUrl?: true
    description?: true
    questionImageUrl?: true
    type?: true
    isActive?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    name?: true
    difficulty?: true
    solution?: true
    videoUrl?: true
    description?: true
    questionImageUrl?: true
    type?: true
    isActive?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    name?: true
    difficulty?: true
    hints?: true
    solution?: true
    videoUrl?: true
    description?: true
    questionImageUrl?: true
    type?: true
    isActive?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: string
    name: string
    difficulty: string
    hints: string[]
    solution: string | null
    videoUrl: string | null
    description: string | null
    questionImageUrl: string | null
    type: string | null
    isActive: boolean
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    difficulty?: boolean
    hints?: boolean
    solution?: boolean
    videoUrl?: boolean
    description?: boolean
    questionImageUrl?: boolean
    type?: boolean
    isActive?: boolean
    nodeExercises?: boolean | Exercise$nodeExercisesArgs<ExtArgs>
    userProgress?: boolean | Exercise$userProgressArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    difficulty?: boolean
    hints?: boolean
    solution?: boolean
    videoUrl?: boolean
    description?: boolean
    questionImageUrl?: boolean
    type?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    difficulty?: boolean
    hints?: boolean
    solution?: boolean
    videoUrl?: boolean
    description?: boolean
    questionImageUrl?: boolean
    type?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    name?: boolean
    difficulty?: boolean
    hints?: boolean
    solution?: boolean
    videoUrl?: boolean
    description?: boolean
    questionImageUrl?: boolean
    type?: boolean
    isActive?: boolean
  }

  export type ExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "difficulty" | "hints" | "solution" | "videoUrl" | "description" | "questionImageUrl" | "type" | "isActive", ExtArgs["result"]["exercise"]>
  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodeExercises?: boolean | Exercise$nodeExercisesArgs<ExtArgs>
    userProgress?: boolean | Exercise$userProgressArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      nodeExercises: Prisma.$NodeExercisePayload<ExtArgs>[]
      userProgress: Prisma.$UserExerciseProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      difficulty: string
      hints: string[]
      solution: string | null
      videoUrl: string | null
      description: string | null
      questionImageUrl: string | null
      type: string | null
      isActive: boolean
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseFindUniqueArgs>(args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseFindFirstArgs>(args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseFindManyArgs>(args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends ExerciseCreateArgs>(args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseCreateManyArgs>(args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends ExerciseDeleteArgs>(args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseUpdateArgs>(args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseDeleteManyArgs>(args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseUpdateManyArgs>(args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises and returns the data updated in the database.
     * @param {ExerciseUpdateManyAndReturnArgs} args - Arguments to update many Exercises.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseUpsertArgs>(args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nodeExercises<T extends Exercise$nodeExercisesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$nodeExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userProgress<T extends Exercise$userProgressArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$userProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exercise model
   */
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'String'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly difficulty: FieldRef<"Exercise", 'String'>
    readonly hints: FieldRef<"Exercise", 'String[]'>
    readonly solution: FieldRef<"Exercise", 'String'>
    readonly videoUrl: FieldRef<"Exercise", 'String'>
    readonly description: FieldRef<"Exercise", 'String'>
    readonly questionImageUrl: FieldRef<"Exercise", 'String'>
    readonly type: FieldRef<"Exercise", 'String'>
    readonly isActive: FieldRef<"Exercise", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise updateManyAndReturn
   */
  export type ExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to delete.
     */
    limit?: number
  }

  /**
   * Exercise.nodeExercises
   */
  export type Exercise$nodeExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    where?: NodeExerciseWhereInput
    orderBy?: NodeExerciseOrderByWithRelationInput | NodeExerciseOrderByWithRelationInput[]
    cursor?: NodeExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeExerciseScalarFieldEnum | NodeExerciseScalarFieldEnum[]
  }

  /**
   * Exercise.userProgress
   */
  export type Exercise$userProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    where?: UserExerciseProgressWhereInput
    orderBy?: UserExerciseProgressOrderByWithRelationInput | UserExerciseProgressOrderByWithRelationInput[]
    cursor?: UserExerciseProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserExerciseProgressScalarFieldEnum | UserExerciseProgressScalarFieldEnum[]
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model NodeExercise
   */

  export type AggregateNodeExercise = {
    _count: NodeExerciseCountAggregateOutputType | null
    _avg: NodeExerciseAvgAggregateOutputType | null
    _sum: NodeExerciseSumAggregateOutputType | null
    _min: NodeExerciseMinAggregateOutputType | null
    _max: NodeExerciseMaxAggregateOutputType | null
  }

  export type NodeExerciseAvgAggregateOutputType = {
    orderIndex: number | null
  }

  export type NodeExerciseSumAggregateOutputType = {
    orderIndex: number | null
  }

  export type NodeExerciseMinAggregateOutputType = {
    nodeId: string | null
    exerciseId: string | null
    orderIndex: number | null
  }

  export type NodeExerciseMaxAggregateOutputType = {
    nodeId: string | null
    exerciseId: string | null
    orderIndex: number | null
  }

  export type NodeExerciseCountAggregateOutputType = {
    nodeId: number
    exerciseId: number
    orderIndex: number
    _all: number
  }


  export type NodeExerciseAvgAggregateInputType = {
    orderIndex?: true
  }

  export type NodeExerciseSumAggregateInputType = {
    orderIndex?: true
  }

  export type NodeExerciseMinAggregateInputType = {
    nodeId?: true
    exerciseId?: true
    orderIndex?: true
  }

  export type NodeExerciseMaxAggregateInputType = {
    nodeId?: true
    exerciseId?: true
    orderIndex?: true
  }

  export type NodeExerciseCountAggregateInputType = {
    nodeId?: true
    exerciseId?: true
    orderIndex?: true
    _all?: true
  }

  export type NodeExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodeExercise to aggregate.
     */
    where?: NodeExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeExercises to fetch.
     */
    orderBy?: NodeExerciseOrderByWithRelationInput | NodeExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NodeExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NodeExercises
    **/
    _count?: true | NodeExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NodeExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NodeExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NodeExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NodeExerciseMaxAggregateInputType
  }

  export type GetNodeExerciseAggregateType<T extends NodeExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateNodeExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNodeExercise[P]>
      : GetScalarType<T[P], AggregateNodeExercise[P]>
  }




  export type NodeExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeExerciseWhereInput
    orderBy?: NodeExerciseOrderByWithAggregationInput | NodeExerciseOrderByWithAggregationInput[]
    by: NodeExerciseScalarFieldEnum[] | NodeExerciseScalarFieldEnum
    having?: NodeExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NodeExerciseCountAggregateInputType | true
    _avg?: NodeExerciseAvgAggregateInputType
    _sum?: NodeExerciseSumAggregateInputType
    _min?: NodeExerciseMinAggregateInputType
    _max?: NodeExerciseMaxAggregateInputType
  }

  export type NodeExerciseGroupByOutputType = {
    nodeId: string
    exerciseId: string
    orderIndex: number | null
    _count: NodeExerciseCountAggregateOutputType | null
    _avg: NodeExerciseAvgAggregateOutputType | null
    _sum: NodeExerciseSumAggregateOutputType | null
    _min: NodeExerciseMinAggregateOutputType | null
    _max: NodeExerciseMaxAggregateOutputType | null
  }

  type GetNodeExerciseGroupByPayload<T extends NodeExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NodeExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NodeExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NodeExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], NodeExerciseGroupByOutputType[P]>
        }
      >
    >


  export type NodeExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nodeId?: boolean
    exerciseId?: boolean
    orderIndex?: boolean
    node?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeExercise"]>

  export type NodeExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nodeId?: boolean
    exerciseId?: boolean
    orderIndex?: boolean
    node?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeExercise"]>

  export type NodeExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nodeId?: boolean
    exerciseId?: boolean
    orderIndex?: boolean
    node?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeExercise"]>

  export type NodeExerciseSelectScalar = {
    nodeId?: boolean
    exerciseId?: boolean
    orderIndex?: boolean
  }

  export type NodeExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"nodeId" | "exerciseId" | "orderIndex", ExtArgs["result"]["nodeExercise"]>
  export type NodeExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }
  export type NodeExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }
  export type NodeExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node?: boolean | RoadmapNodeDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }

  export type $NodeExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NodeExercise"
    objects: {
      node: Prisma.$RoadmapNodePayload<ExtArgs>
      exercise: Prisma.$ExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      nodeId: string
      exerciseId: string
      orderIndex: number | null
    }, ExtArgs["result"]["nodeExercise"]>
    composites: {}
  }

  type NodeExerciseGetPayload<S extends boolean | null | undefined | NodeExerciseDefaultArgs> = $Result.GetResult<Prisma.$NodeExercisePayload, S>

  type NodeExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NodeExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NodeExerciseCountAggregateInputType | true
    }

  export interface NodeExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NodeExercise'], meta: { name: 'NodeExercise' } }
    /**
     * Find zero or one NodeExercise that matches the filter.
     * @param {NodeExerciseFindUniqueArgs} args - Arguments to find a NodeExercise
     * @example
     * // Get one NodeExercise
     * const nodeExercise = await prisma.nodeExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NodeExerciseFindUniqueArgs>(args: SelectSubset<T, NodeExerciseFindUniqueArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NodeExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NodeExerciseFindUniqueOrThrowArgs} args - Arguments to find a NodeExercise
     * @example
     * // Get one NodeExercise
     * const nodeExercise = await prisma.nodeExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NodeExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, NodeExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NodeExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeExerciseFindFirstArgs} args - Arguments to find a NodeExercise
     * @example
     * // Get one NodeExercise
     * const nodeExercise = await prisma.nodeExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NodeExerciseFindFirstArgs>(args?: SelectSubset<T, NodeExerciseFindFirstArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NodeExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeExerciseFindFirstOrThrowArgs} args - Arguments to find a NodeExercise
     * @example
     * // Get one NodeExercise
     * const nodeExercise = await prisma.nodeExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NodeExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, NodeExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NodeExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NodeExercises
     * const nodeExercises = await prisma.nodeExercise.findMany()
     * 
     * // Get first 10 NodeExercises
     * const nodeExercises = await prisma.nodeExercise.findMany({ take: 10 })
     * 
     * // Only select the `nodeId`
     * const nodeExerciseWithNodeIdOnly = await prisma.nodeExercise.findMany({ select: { nodeId: true } })
     * 
     */
    findMany<T extends NodeExerciseFindManyArgs>(args?: SelectSubset<T, NodeExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NodeExercise.
     * @param {NodeExerciseCreateArgs} args - Arguments to create a NodeExercise.
     * @example
     * // Create one NodeExercise
     * const NodeExercise = await prisma.nodeExercise.create({
     *   data: {
     *     // ... data to create a NodeExercise
     *   }
     * })
     * 
     */
    create<T extends NodeExerciseCreateArgs>(args: SelectSubset<T, NodeExerciseCreateArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NodeExercises.
     * @param {NodeExerciseCreateManyArgs} args - Arguments to create many NodeExercises.
     * @example
     * // Create many NodeExercises
     * const nodeExercise = await prisma.nodeExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NodeExerciseCreateManyArgs>(args?: SelectSubset<T, NodeExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NodeExercises and returns the data saved in the database.
     * @param {NodeExerciseCreateManyAndReturnArgs} args - Arguments to create many NodeExercises.
     * @example
     * // Create many NodeExercises
     * const nodeExercise = await prisma.nodeExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NodeExercises and only return the `nodeId`
     * const nodeExerciseWithNodeIdOnly = await prisma.nodeExercise.createManyAndReturn({
     *   select: { nodeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NodeExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, NodeExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NodeExercise.
     * @param {NodeExerciseDeleteArgs} args - Arguments to delete one NodeExercise.
     * @example
     * // Delete one NodeExercise
     * const NodeExercise = await prisma.nodeExercise.delete({
     *   where: {
     *     // ... filter to delete one NodeExercise
     *   }
     * })
     * 
     */
    delete<T extends NodeExerciseDeleteArgs>(args: SelectSubset<T, NodeExerciseDeleteArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NodeExercise.
     * @param {NodeExerciseUpdateArgs} args - Arguments to update one NodeExercise.
     * @example
     * // Update one NodeExercise
     * const nodeExercise = await prisma.nodeExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NodeExerciseUpdateArgs>(args: SelectSubset<T, NodeExerciseUpdateArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NodeExercises.
     * @param {NodeExerciseDeleteManyArgs} args - Arguments to filter NodeExercises to delete.
     * @example
     * // Delete a few NodeExercises
     * const { count } = await prisma.nodeExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NodeExerciseDeleteManyArgs>(args?: SelectSubset<T, NodeExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NodeExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NodeExercises
     * const nodeExercise = await prisma.nodeExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NodeExerciseUpdateManyArgs>(args: SelectSubset<T, NodeExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NodeExercises and returns the data updated in the database.
     * @param {NodeExerciseUpdateManyAndReturnArgs} args - Arguments to update many NodeExercises.
     * @example
     * // Update many NodeExercises
     * const nodeExercise = await prisma.nodeExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NodeExercises and only return the `nodeId`
     * const nodeExerciseWithNodeIdOnly = await prisma.nodeExercise.updateManyAndReturn({
     *   select: { nodeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NodeExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, NodeExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NodeExercise.
     * @param {NodeExerciseUpsertArgs} args - Arguments to update or create a NodeExercise.
     * @example
     * // Update or create a NodeExercise
     * const nodeExercise = await prisma.nodeExercise.upsert({
     *   create: {
     *     // ... data to create a NodeExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NodeExercise we want to update
     *   }
     * })
     */
    upsert<T extends NodeExerciseUpsertArgs>(args: SelectSubset<T, NodeExerciseUpsertArgs<ExtArgs>>): Prisma__NodeExerciseClient<$Result.GetResult<Prisma.$NodeExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NodeExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeExerciseCountArgs} args - Arguments to filter NodeExercises to count.
     * @example
     * // Count the number of NodeExercises
     * const count = await prisma.nodeExercise.count({
     *   where: {
     *     // ... the filter for the NodeExercises we want to count
     *   }
     * })
    **/
    count<T extends NodeExerciseCountArgs>(
      args?: Subset<T, NodeExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NodeExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NodeExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NodeExerciseAggregateArgs>(args: Subset<T, NodeExerciseAggregateArgs>): Prisma.PrismaPromise<GetNodeExerciseAggregateType<T>>

    /**
     * Group by NodeExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NodeExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NodeExerciseGroupByArgs['orderBy'] }
        : { orderBy?: NodeExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NodeExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNodeExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NodeExercise model
   */
  readonly fields: NodeExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NodeExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NodeExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    node<T extends RoadmapNodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoadmapNodeDefaultArgs<ExtArgs>>): Prisma__RoadmapNodeClient<$Result.GetResult<Prisma.$RoadmapNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NodeExercise model
   */
  interface NodeExerciseFieldRefs {
    readonly nodeId: FieldRef<"NodeExercise", 'String'>
    readonly exerciseId: FieldRef<"NodeExercise", 'String'>
    readonly orderIndex: FieldRef<"NodeExercise", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * NodeExercise findUnique
   */
  export type NodeExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * Filter, which NodeExercise to fetch.
     */
    where: NodeExerciseWhereUniqueInput
  }

  /**
   * NodeExercise findUniqueOrThrow
   */
  export type NodeExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * Filter, which NodeExercise to fetch.
     */
    where: NodeExerciseWhereUniqueInput
  }

  /**
   * NodeExercise findFirst
   */
  export type NodeExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * Filter, which NodeExercise to fetch.
     */
    where?: NodeExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeExercises to fetch.
     */
    orderBy?: NodeExerciseOrderByWithRelationInput | NodeExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodeExercises.
     */
    cursor?: NodeExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodeExercises.
     */
    distinct?: NodeExerciseScalarFieldEnum | NodeExerciseScalarFieldEnum[]
  }

  /**
   * NodeExercise findFirstOrThrow
   */
  export type NodeExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * Filter, which NodeExercise to fetch.
     */
    where?: NodeExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeExercises to fetch.
     */
    orderBy?: NodeExerciseOrderByWithRelationInput | NodeExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodeExercises.
     */
    cursor?: NodeExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodeExercises.
     */
    distinct?: NodeExerciseScalarFieldEnum | NodeExerciseScalarFieldEnum[]
  }

  /**
   * NodeExercise findMany
   */
  export type NodeExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * Filter, which NodeExercises to fetch.
     */
    where?: NodeExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeExercises to fetch.
     */
    orderBy?: NodeExerciseOrderByWithRelationInput | NodeExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NodeExercises.
     */
    cursor?: NodeExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeExercises.
     */
    skip?: number
    distinct?: NodeExerciseScalarFieldEnum | NodeExerciseScalarFieldEnum[]
  }

  /**
   * NodeExercise create
   */
  export type NodeExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a NodeExercise.
     */
    data: XOR<NodeExerciseCreateInput, NodeExerciseUncheckedCreateInput>
  }

  /**
   * NodeExercise createMany
   */
  export type NodeExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NodeExercises.
     */
    data: NodeExerciseCreateManyInput | NodeExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NodeExercise createManyAndReturn
   */
  export type NodeExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many NodeExercises.
     */
    data: NodeExerciseCreateManyInput | NodeExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NodeExercise update
   */
  export type NodeExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a NodeExercise.
     */
    data: XOR<NodeExerciseUpdateInput, NodeExerciseUncheckedUpdateInput>
    /**
     * Choose, which NodeExercise to update.
     */
    where: NodeExerciseWhereUniqueInput
  }

  /**
   * NodeExercise updateMany
   */
  export type NodeExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NodeExercises.
     */
    data: XOR<NodeExerciseUpdateManyMutationInput, NodeExerciseUncheckedUpdateManyInput>
    /**
     * Filter which NodeExercises to update
     */
    where?: NodeExerciseWhereInput
    /**
     * Limit how many NodeExercises to update.
     */
    limit?: number
  }

  /**
   * NodeExercise updateManyAndReturn
   */
  export type NodeExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * The data used to update NodeExercises.
     */
    data: XOR<NodeExerciseUpdateManyMutationInput, NodeExerciseUncheckedUpdateManyInput>
    /**
     * Filter which NodeExercises to update
     */
    where?: NodeExerciseWhereInput
    /**
     * Limit how many NodeExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NodeExercise upsert
   */
  export type NodeExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the NodeExercise to update in case it exists.
     */
    where: NodeExerciseWhereUniqueInput
    /**
     * In case the NodeExercise found by the `where` argument doesn't exist, create a new NodeExercise with this data.
     */
    create: XOR<NodeExerciseCreateInput, NodeExerciseUncheckedCreateInput>
    /**
     * In case the NodeExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NodeExerciseUpdateInput, NodeExerciseUncheckedUpdateInput>
  }

  /**
   * NodeExercise delete
   */
  export type NodeExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
    /**
     * Filter which NodeExercise to delete.
     */
    where: NodeExerciseWhereUniqueInput
  }

  /**
   * NodeExercise deleteMany
   */
  export type NodeExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodeExercises to delete
     */
    where?: NodeExerciseWhereInput
    /**
     * Limit how many NodeExercises to delete.
     */
    limit?: number
  }

  /**
   * NodeExercise without action
   */
  export type NodeExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeExercise
     */
    select?: NodeExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeExercise
     */
    omit?: NodeExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeExerciseInclude<ExtArgs> | null
  }


  /**
   * Model UserExerciseProgress
   */

  export type AggregateUserExerciseProgress = {
    _count: UserExerciseProgressCountAggregateOutputType | null
    _min: UserExerciseProgressMinAggregateOutputType | null
    _max: UserExerciseProgressMaxAggregateOutputType | null
  }

  export type UserExerciseProgressMinAggregateOutputType = {
    userId: string | null
    exerciseId: string | null
    completed: boolean | null
    completedAt: Date | null
  }

  export type UserExerciseProgressMaxAggregateOutputType = {
    userId: string | null
    exerciseId: string | null
    completed: boolean | null
    completedAt: Date | null
  }

  export type UserExerciseProgressCountAggregateOutputType = {
    userId: number
    exerciseId: number
    completed: number
    completedAt: number
    _all: number
  }


  export type UserExerciseProgressMinAggregateInputType = {
    userId?: true
    exerciseId?: true
    completed?: true
    completedAt?: true
  }

  export type UserExerciseProgressMaxAggregateInputType = {
    userId?: true
    exerciseId?: true
    completed?: true
    completedAt?: true
  }

  export type UserExerciseProgressCountAggregateInputType = {
    userId?: true
    exerciseId?: true
    completed?: true
    completedAt?: true
    _all?: true
  }

  export type UserExerciseProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserExerciseProgress to aggregate.
     */
    where?: UserExerciseProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserExerciseProgresses to fetch.
     */
    orderBy?: UserExerciseProgressOrderByWithRelationInput | UserExerciseProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserExerciseProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserExerciseProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserExerciseProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserExerciseProgresses
    **/
    _count?: true | UserExerciseProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserExerciseProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserExerciseProgressMaxAggregateInputType
  }

  export type GetUserExerciseProgressAggregateType<T extends UserExerciseProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserExerciseProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserExerciseProgress[P]>
      : GetScalarType<T[P], AggregateUserExerciseProgress[P]>
  }




  export type UserExerciseProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserExerciseProgressWhereInput
    orderBy?: UserExerciseProgressOrderByWithAggregationInput | UserExerciseProgressOrderByWithAggregationInput[]
    by: UserExerciseProgressScalarFieldEnum[] | UserExerciseProgressScalarFieldEnum
    having?: UserExerciseProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserExerciseProgressCountAggregateInputType | true
    _min?: UserExerciseProgressMinAggregateInputType
    _max?: UserExerciseProgressMaxAggregateInputType
  }

  export type UserExerciseProgressGroupByOutputType = {
    userId: string
    exerciseId: string
    completed: boolean
    completedAt: Date | null
    _count: UserExerciseProgressCountAggregateOutputType | null
    _min: UserExerciseProgressMinAggregateOutputType | null
    _max: UserExerciseProgressMaxAggregateOutputType | null
  }

  type GetUserExerciseProgressGroupByPayload<T extends UserExerciseProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserExerciseProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserExerciseProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserExerciseProgressGroupByOutputType[P]>
            : GetScalarType<T[P], UserExerciseProgressGroupByOutputType[P]>
        }
      >
    >


  export type UserExerciseProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    exerciseId?: boolean
    completed?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userExerciseProgress"]>

  export type UserExerciseProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    exerciseId?: boolean
    completed?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userExerciseProgress"]>

  export type UserExerciseProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    exerciseId?: boolean
    completed?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userExerciseProgress"]>

  export type UserExerciseProgressSelectScalar = {
    userId?: boolean
    exerciseId?: boolean
    completed?: boolean
    completedAt?: boolean
  }

  export type UserExerciseProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "exerciseId" | "completed" | "completedAt", ExtArgs["result"]["userExerciseProgress"]>
  export type UserExerciseProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }
  export type UserExerciseProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }
  export type UserExerciseProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }

  export type $UserExerciseProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserExerciseProgress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      exercise: Prisma.$ExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      exerciseId: string
      completed: boolean
      completedAt: Date | null
    }, ExtArgs["result"]["userExerciseProgress"]>
    composites: {}
  }

  type UserExerciseProgressGetPayload<S extends boolean | null | undefined | UserExerciseProgressDefaultArgs> = $Result.GetResult<Prisma.$UserExerciseProgressPayload, S>

  type UserExerciseProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserExerciseProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserExerciseProgressCountAggregateInputType | true
    }

  export interface UserExerciseProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserExerciseProgress'], meta: { name: 'UserExerciseProgress' } }
    /**
     * Find zero or one UserExerciseProgress that matches the filter.
     * @param {UserExerciseProgressFindUniqueArgs} args - Arguments to find a UserExerciseProgress
     * @example
     * // Get one UserExerciseProgress
     * const userExerciseProgress = await prisma.userExerciseProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserExerciseProgressFindUniqueArgs>(args: SelectSubset<T, UserExerciseProgressFindUniqueArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserExerciseProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserExerciseProgressFindUniqueOrThrowArgs} args - Arguments to find a UserExerciseProgress
     * @example
     * // Get one UserExerciseProgress
     * const userExerciseProgress = await prisma.userExerciseProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserExerciseProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, UserExerciseProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserExerciseProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserExerciseProgressFindFirstArgs} args - Arguments to find a UserExerciseProgress
     * @example
     * // Get one UserExerciseProgress
     * const userExerciseProgress = await prisma.userExerciseProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserExerciseProgressFindFirstArgs>(args?: SelectSubset<T, UserExerciseProgressFindFirstArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserExerciseProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserExerciseProgressFindFirstOrThrowArgs} args - Arguments to find a UserExerciseProgress
     * @example
     * // Get one UserExerciseProgress
     * const userExerciseProgress = await prisma.userExerciseProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserExerciseProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, UserExerciseProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserExerciseProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserExerciseProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserExerciseProgresses
     * const userExerciseProgresses = await prisma.userExerciseProgress.findMany()
     * 
     * // Get first 10 UserExerciseProgresses
     * const userExerciseProgresses = await prisma.userExerciseProgress.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userExerciseProgressWithUserIdOnly = await prisma.userExerciseProgress.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserExerciseProgressFindManyArgs>(args?: SelectSubset<T, UserExerciseProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserExerciseProgress.
     * @param {UserExerciseProgressCreateArgs} args - Arguments to create a UserExerciseProgress.
     * @example
     * // Create one UserExerciseProgress
     * const UserExerciseProgress = await prisma.userExerciseProgress.create({
     *   data: {
     *     // ... data to create a UserExerciseProgress
     *   }
     * })
     * 
     */
    create<T extends UserExerciseProgressCreateArgs>(args: SelectSubset<T, UserExerciseProgressCreateArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserExerciseProgresses.
     * @param {UserExerciseProgressCreateManyArgs} args - Arguments to create many UserExerciseProgresses.
     * @example
     * // Create many UserExerciseProgresses
     * const userExerciseProgress = await prisma.userExerciseProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserExerciseProgressCreateManyArgs>(args?: SelectSubset<T, UserExerciseProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserExerciseProgresses and returns the data saved in the database.
     * @param {UserExerciseProgressCreateManyAndReturnArgs} args - Arguments to create many UserExerciseProgresses.
     * @example
     * // Create many UserExerciseProgresses
     * const userExerciseProgress = await prisma.userExerciseProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserExerciseProgresses and only return the `userId`
     * const userExerciseProgressWithUserIdOnly = await prisma.userExerciseProgress.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserExerciseProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, UserExerciseProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserExerciseProgress.
     * @param {UserExerciseProgressDeleteArgs} args - Arguments to delete one UserExerciseProgress.
     * @example
     * // Delete one UserExerciseProgress
     * const UserExerciseProgress = await prisma.userExerciseProgress.delete({
     *   where: {
     *     // ... filter to delete one UserExerciseProgress
     *   }
     * })
     * 
     */
    delete<T extends UserExerciseProgressDeleteArgs>(args: SelectSubset<T, UserExerciseProgressDeleteArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserExerciseProgress.
     * @param {UserExerciseProgressUpdateArgs} args - Arguments to update one UserExerciseProgress.
     * @example
     * // Update one UserExerciseProgress
     * const userExerciseProgress = await prisma.userExerciseProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserExerciseProgressUpdateArgs>(args: SelectSubset<T, UserExerciseProgressUpdateArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserExerciseProgresses.
     * @param {UserExerciseProgressDeleteManyArgs} args - Arguments to filter UserExerciseProgresses to delete.
     * @example
     * // Delete a few UserExerciseProgresses
     * const { count } = await prisma.userExerciseProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserExerciseProgressDeleteManyArgs>(args?: SelectSubset<T, UserExerciseProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserExerciseProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserExerciseProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserExerciseProgresses
     * const userExerciseProgress = await prisma.userExerciseProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserExerciseProgressUpdateManyArgs>(args: SelectSubset<T, UserExerciseProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserExerciseProgresses and returns the data updated in the database.
     * @param {UserExerciseProgressUpdateManyAndReturnArgs} args - Arguments to update many UserExerciseProgresses.
     * @example
     * // Update many UserExerciseProgresses
     * const userExerciseProgress = await prisma.userExerciseProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserExerciseProgresses and only return the `userId`
     * const userExerciseProgressWithUserIdOnly = await prisma.userExerciseProgress.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserExerciseProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, UserExerciseProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserExerciseProgress.
     * @param {UserExerciseProgressUpsertArgs} args - Arguments to update or create a UserExerciseProgress.
     * @example
     * // Update or create a UserExerciseProgress
     * const userExerciseProgress = await prisma.userExerciseProgress.upsert({
     *   create: {
     *     // ... data to create a UserExerciseProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserExerciseProgress we want to update
     *   }
     * })
     */
    upsert<T extends UserExerciseProgressUpsertArgs>(args: SelectSubset<T, UserExerciseProgressUpsertArgs<ExtArgs>>): Prisma__UserExerciseProgressClient<$Result.GetResult<Prisma.$UserExerciseProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserExerciseProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserExerciseProgressCountArgs} args - Arguments to filter UserExerciseProgresses to count.
     * @example
     * // Count the number of UserExerciseProgresses
     * const count = await prisma.userExerciseProgress.count({
     *   where: {
     *     // ... the filter for the UserExerciseProgresses we want to count
     *   }
     * })
    **/
    count<T extends UserExerciseProgressCountArgs>(
      args?: Subset<T, UserExerciseProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserExerciseProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserExerciseProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserExerciseProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserExerciseProgressAggregateArgs>(args: Subset<T, UserExerciseProgressAggregateArgs>): Prisma.PrismaPromise<GetUserExerciseProgressAggregateType<T>>

    /**
     * Group by UserExerciseProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserExerciseProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserExerciseProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserExerciseProgressGroupByArgs['orderBy'] }
        : { orderBy?: UserExerciseProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserExerciseProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserExerciseProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserExerciseProgress model
   */
  readonly fields: UserExerciseProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserExerciseProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserExerciseProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserExerciseProgress model
   */
  interface UserExerciseProgressFieldRefs {
    readonly userId: FieldRef<"UserExerciseProgress", 'String'>
    readonly exerciseId: FieldRef<"UserExerciseProgress", 'String'>
    readonly completed: FieldRef<"UserExerciseProgress", 'Boolean'>
    readonly completedAt: FieldRef<"UserExerciseProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserExerciseProgress findUnique
   */
  export type UserExerciseProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserExerciseProgress to fetch.
     */
    where: UserExerciseProgressWhereUniqueInput
  }

  /**
   * UserExerciseProgress findUniqueOrThrow
   */
  export type UserExerciseProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserExerciseProgress to fetch.
     */
    where: UserExerciseProgressWhereUniqueInput
  }

  /**
   * UserExerciseProgress findFirst
   */
  export type UserExerciseProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserExerciseProgress to fetch.
     */
    where?: UserExerciseProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserExerciseProgresses to fetch.
     */
    orderBy?: UserExerciseProgressOrderByWithRelationInput | UserExerciseProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserExerciseProgresses.
     */
    cursor?: UserExerciseProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserExerciseProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserExerciseProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserExerciseProgresses.
     */
    distinct?: UserExerciseProgressScalarFieldEnum | UserExerciseProgressScalarFieldEnum[]
  }

  /**
   * UserExerciseProgress findFirstOrThrow
   */
  export type UserExerciseProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserExerciseProgress to fetch.
     */
    where?: UserExerciseProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserExerciseProgresses to fetch.
     */
    orderBy?: UserExerciseProgressOrderByWithRelationInput | UserExerciseProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserExerciseProgresses.
     */
    cursor?: UserExerciseProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserExerciseProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserExerciseProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserExerciseProgresses.
     */
    distinct?: UserExerciseProgressScalarFieldEnum | UserExerciseProgressScalarFieldEnum[]
  }

  /**
   * UserExerciseProgress findMany
   */
  export type UserExerciseProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserExerciseProgresses to fetch.
     */
    where?: UserExerciseProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserExerciseProgresses to fetch.
     */
    orderBy?: UserExerciseProgressOrderByWithRelationInput | UserExerciseProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserExerciseProgresses.
     */
    cursor?: UserExerciseProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserExerciseProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserExerciseProgresses.
     */
    skip?: number
    distinct?: UserExerciseProgressScalarFieldEnum | UserExerciseProgressScalarFieldEnum[]
  }

  /**
   * UserExerciseProgress create
   */
  export type UserExerciseProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a UserExerciseProgress.
     */
    data: XOR<UserExerciseProgressCreateInput, UserExerciseProgressUncheckedCreateInput>
  }

  /**
   * UserExerciseProgress createMany
   */
  export type UserExerciseProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserExerciseProgresses.
     */
    data: UserExerciseProgressCreateManyInput | UserExerciseProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserExerciseProgress createManyAndReturn
   */
  export type UserExerciseProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * The data used to create many UserExerciseProgresses.
     */
    data: UserExerciseProgressCreateManyInput | UserExerciseProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserExerciseProgress update
   */
  export type UserExerciseProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a UserExerciseProgress.
     */
    data: XOR<UserExerciseProgressUpdateInput, UserExerciseProgressUncheckedUpdateInput>
    /**
     * Choose, which UserExerciseProgress to update.
     */
    where: UserExerciseProgressWhereUniqueInput
  }

  /**
   * UserExerciseProgress updateMany
   */
  export type UserExerciseProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserExerciseProgresses.
     */
    data: XOR<UserExerciseProgressUpdateManyMutationInput, UserExerciseProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserExerciseProgresses to update
     */
    where?: UserExerciseProgressWhereInput
    /**
     * Limit how many UserExerciseProgresses to update.
     */
    limit?: number
  }

  /**
   * UserExerciseProgress updateManyAndReturn
   */
  export type UserExerciseProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * The data used to update UserExerciseProgresses.
     */
    data: XOR<UserExerciseProgressUpdateManyMutationInput, UserExerciseProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserExerciseProgresses to update
     */
    where?: UserExerciseProgressWhereInput
    /**
     * Limit how many UserExerciseProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserExerciseProgress upsert
   */
  export type UserExerciseProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the UserExerciseProgress to update in case it exists.
     */
    where: UserExerciseProgressWhereUniqueInput
    /**
     * In case the UserExerciseProgress found by the `where` argument doesn't exist, create a new UserExerciseProgress with this data.
     */
    create: XOR<UserExerciseProgressCreateInput, UserExerciseProgressUncheckedCreateInput>
    /**
     * In case the UserExerciseProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserExerciseProgressUpdateInput, UserExerciseProgressUncheckedUpdateInput>
  }

  /**
   * UserExerciseProgress delete
   */
  export type UserExerciseProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
    /**
     * Filter which UserExerciseProgress to delete.
     */
    where: UserExerciseProgressWhereUniqueInput
  }

  /**
   * UserExerciseProgress deleteMany
   */
  export type UserExerciseProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserExerciseProgresses to delete
     */
    where?: UserExerciseProgressWhereInput
    /**
     * Limit how many UserExerciseProgresses to delete.
     */
    limit?: number
  }

  /**
   * UserExerciseProgress without action
   */
  export type UserExerciseProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserExerciseProgress
     */
    select?: UserExerciseProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserExerciseProgress
     */
    omit?: UserExerciseProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserExerciseProgressInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    image: 'image',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoadmapScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt'
  };

  export type RoadmapScalarFieldEnum = (typeof RoadmapScalarFieldEnum)[keyof typeof RoadmapScalarFieldEnum]


  export const RoadmapNodeScalarFieldEnum: {
    id: 'id',
    roadmapId: 'roadmapId',
    label: 'label',
    description: 'description',
    type: 'type',
    positionX: 'positionX',
    positionY: 'positionY'
  };

  export type RoadmapNodeScalarFieldEnum = (typeof RoadmapNodeScalarFieldEnum)[keyof typeof RoadmapNodeScalarFieldEnum]


  export const RoadmapEdgeScalarFieldEnum: {
    id: 'id',
    roadmapId: 'roadmapId',
    sourceNodeId: 'sourceNodeId',
    targetNodeId: 'targetNodeId'
  };

  export type RoadmapEdgeScalarFieldEnum = (typeof RoadmapEdgeScalarFieldEnum)[keyof typeof RoadmapEdgeScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    difficulty: 'difficulty',
    hints: 'hints',
    solution: 'solution',
    videoUrl: 'videoUrl',
    description: 'description',
    questionImageUrl: 'questionImageUrl',
    type: 'type',
    isActive: 'isActive'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const NodeExerciseScalarFieldEnum: {
    nodeId: 'nodeId',
    exerciseId: 'exerciseId',
    orderIndex: 'orderIndex'
  };

  export type NodeExerciseScalarFieldEnum = (typeof NodeExerciseScalarFieldEnum)[keyof typeof NodeExerciseScalarFieldEnum]


  export const UserExerciseProgressScalarFieldEnum: {
    userId: 'userId',
    exerciseId: 'exerciseId',
    completed: 'completed',
    completedAt: 'completedAt'
  };

  export type UserExerciseProgressScalarFieldEnum = (typeof UserExerciseProgressScalarFieldEnum)[keyof typeof UserExerciseProgressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    role?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    exerciseProgress?: UserExerciseProgressListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    exerciseProgress?: UserExerciseProgressOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    role?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    exerciseProgress?: UserExerciseProgressListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RoadmapWhereInput = {
    AND?: RoadmapWhereInput | RoadmapWhereInput[]
    OR?: RoadmapWhereInput[]
    NOT?: RoadmapWhereInput | RoadmapWhereInput[]
    id?: StringFilter<"Roadmap"> | string
    title?: StringFilter<"Roadmap"> | string
    description?: StringNullableFilter<"Roadmap"> | string | null
    category?: StringNullableFilter<"Roadmap"> | string | null
    imageUrl?: StringNullableFilter<"Roadmap"> | string | null
    createdAt?: DateTimeFilter<"Roadmap"> | Date | string
    nodes?: RoadmapNodeListRelationFilter
    edges?: RoadmapEdgeListRelationFilter
  }

  export type RoadmapOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    nodes?: RoadmapNodeOrderByRelationAggregateInput
    edges?: RoadmapEdgeOrderByRelationAggregateInput
  }

  export type RoadmapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoadmapWhereInput | RoadmapWhereInput[]
    OR?: RoadmapWhereInput[]
    NOT?: RoadmapWhereInput | RoadmapWhereInput[]
    title?: StringFilter<"Roadmap"> | string
    description?: StringNullableFilter<"Roadmap"> | string | null
    category?: StringNullableFilter<"Roadmap"> | string | null
    imageUrl?: StringNullableFilter<"Roadmap"> | string | null
    createdAt?: DateTimeFilter<"Roadmap"> | Date | string
    nodes?: RoadmapNodeListRelationFilter
    edges?: RoadmapEdgeListRelationFilter
  }, "id">

  export type RoadmapOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RoadmapCountOrderByAggregateInput
    _max?: RoadmapMaxOrderByAggregateInput
    _min?: RoadmapMinOrderByAggregateInput
  }

  export type RoadmapScalarWhereWithAggregatesInput = {
    AND?: RoadmapScalarWhereWithAggregatesInput | RoadmapScalarWhereWithAggregatesInput[]
    OR?: RoadmapScalarWhereWithAggregatesInput[]
    NOT?: RoadmapScalarWhereWithAggregatesInput | RoadmapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Roadmap"> | string
    title?: StringWithAggregatesFilter<"Roadmap"> | string
    description?: StringNullableWithAggregatesFilter<"Roadmap"> | string | null
    category?: StringNullableWithAggregatesFilter<"Roadmap"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Roadmap"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Roadmap"> | Date | string
  }

  export type RoadmapNodeWhereInput = {
    AND?: RoadmapNodeWhereInput | RoadmapNodeWhereInput[]
    OR?: RoadmapNodeWhereInput[]
    NOT?: RoadmapNodeWhereInput | RoadmapNodeWhereInput[]
    id?: StringFilter<"RoadmapNode"> | string
    roadmapId?: StringFilter<"RoadmapNode"> | string
    label?: StringFilter<"RoadmapNode"> | string
    description?: StringNullableFilter<"RoadmapNode"> | string | null
    type?: StringFilter<"RoadmapNode"> | string
    positionX?: IntNullableFilter<"RoadmapNode"> | number | null
    positionY?: IntNullableFilter<"RoadmapNode"> | number | null
    roadmap?: XOR<RoadmapScalarRelationFilter, RoadmapWhereInput>
    edgesSource?: RoadmapEdgeListRelationFilter
    edgesTarget?: RoadmapEdgeListRelationFilter
    exercises?: NodeExerciseListRelationFilter
  }

  export type RoadmapNodeOrderByWithRelationInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    positionX?: SortOrderInput | SortOrder
    positionY?: SortOrderInput | SortOrder
    roadmap?: RoadmapOrderByWithRelationInput
    edgesSource?: RoadmapEdgeOrderByRelationAggregateInput
    edgesTarget?: RoadmapEdgeOrderByRelationAggregateInput
    exercises?: NodeExerciseOrderByRelationAggregateInput
  }

  export type RoadmapNodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoadmapNodeWhereInput | RoadmapNodeWhereInput[]
    OR?: RoadmapNodeWhereInput[]
    NOT?: RoadmapNodeWhereInput | RoadmapNodeWhereInput[]
    roadmapId?: StringFilter<"RoadmapNode"> | string
    label?: StringFilter<"RoadmapNode"> | string
    description?: StringNullableFilter<"RoadmapNode"> | string | null
    type?: StringFilter<"RoadmapNode"> | string
    positionX?: IntNullableFilter<"RoadmapNode"> | number | null
    positionY?: IntNullableFilter<"RoadmapNode"> | number | null
    roadmap?: XOR<RoadmapScalarRelationFilter, RoadmapWhereInput>
    edgesSource?: RoadmapEdgeListRelationFilter
    edgesTarget?: RoadmapEdgeListRelationFilter
    exercises?: NodeExerciseListRelationFilter
  }, "id">

  export type RoadmapNodeOrderByWithAggregationInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    positionX?: SortOrderInput | SortOrder
    positionY?: SortOrderInput | SortOrder
    _count?: RoadmapNodeCountOrderByAggregateInput
    _avg?: RoadmapNodeAvgOrderByAggregateInput
    _max?: RoadmapNodeMaxOrderByAggregateInput
    _min?: RoadmapNodeMinOrderByAggregateInput
    _sum?: RoadmapNodeSumOrderByAggregateInput
  }

  export type RoadmapNodeScalarWhereWithAggregatesInput = {
    AND?: RoadmapNodeScalarWhereWithAggregatesInput | RoadmapNodeScalarWhereWithAggregatesInput[]
    OR?: RoadmapNodeScalarWhereWithAggregatesInput[]
    NOT?: RoadmapNodeScalarWhereWithAggregatesInput | RoadmapNodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoadmapNode"> | string
    roadmapId?: StringWithAggregatesFilter<"RoadmapNode"> | string
    label?: StringWithAggregatesFilter<"RoadmapNode"> | string
    description?: StringNullableWithAggregatesFilter<"RoadmapNode"> | string | null
    type?: StringWithAggregatesFilter<"RoadmapNode"> | string
    positionX?: IntNullableWithAggregatesFilter<"RoadmapNode"> | number | null
    positionY?: IntNullableWithAggregatesFilter<"RoadmapNode"> | number | null
  }

  export type RoadmapEdgeWhereInput = {
    AND?: RoadmapEdgeWhereInput | RoadmapEdgeWhereInput[]
    OR?: RoadmapEdgeWhereInput[]
    NOT?: RoadmapEdgeWhereInput | RoadmapEdgeWhereInput[]
    id?: StringFilter<"RoadmapEdge"> | string
    roadmapId?: StringFilter<"RoadmapEdge"> | string
    sourceNodeId?: StringFilter<"RoadmapEdge"> | string
    targetNodeId?: StringFilter<"RoadmapEdge"> | string
    roadmap?: XOR<RoadmapScalarRelationFilter, RoadmapWhereInput>
    sourceNode?: XOR<RoadmapNodeScalarRelationFilter, RoadmapNodeWhereInput>
    targetNode?: XOR<RoadmapNodeScalarRelationFilter, RoadmapNodeWhereInput>
  }

  export type RoadmapEdgeOrderByWithRelationInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    sourceNodeId?: SortOrder
    targetNodeId?: SortOrder
    roadmap?: RoadmapOrderByWithRelationInput
    sourceNode?: RoadmapNodeOrderByWithRelationInput
    targetNode?: RoadmapNodeOrderByWithRelationInput
  }

  export type RoadmapEdgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoadmapEdgeWhereInput | RoadmapEdgeWhereInput[]
    OR?: RoadmapEdgeWhereInput[]
    NOT?: RoadmapEdgeWhereInput | RoadmapEdgeWhereInput[]
    roadmapId?: StringFilter<"RoadmapEdge"> | string
    sourceNodeId?: StringFilter<"RoadmapEdge"> | string
    targetNodeId?: StringFilter<"RoadmapEdge"> | string
    roadmap?: XOR<RoadmapScalarRelationFilter, RoadmapWhereInput>
    sourceNode?: XOR<RoadmapNodeScalarRelationFilter, RoadmapNodeWhereInput>
    targetNode?: XOR<RoadmapNodeScalarRelationFilter, RoadmapNodeWhereInput>
  }, "id">

  export type RoadmapEdgeOrderByWithAggregationInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    sourceNodeId?: SortOrder
    targetNodeId?: SortOrder
    _count?: RoadmapEdgeCountOrderByAggregateInput
    _max?: RoadmapEdgeMaxOrderByAggregateInput
    _min?: RoadmapEdgeMinOrderByAggregateInput
  }

  export type RoadmapEdgeScalarWhereWithAggregatesInput = {
    AND?: RoadmapEdgeScalarWhereWithAggregatesInput | RoadmapEdgeScalarWhereWithAggregatesInput[]
    OR?: RoadmapEdgeScalarWhereWithAggregatesInput[]
    NOT?: RoadmapEdgeScalarWhereWithAggregatesInput | RoadmapEdgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoadmapEdge"> | string
    roadmapId?: StringWithAggregatesFilter<"RoadmapEdge"> | string
    sourceNodeId?: StringWithAggregatesFilter<"RoadmapEdge"> | string
    targetNodeId?: StringWithAggregatesFilter<"RoadmapEdge"> | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    difficulty?: StringFilter<"Exercise"> | string
    hints?: StringNullableListFilter<"Exercise">
    solution?: StringNullableFilter<"Exercise"> | string | null
    videoUrl?: StringNullableFilter<"Exercise"> | string | null
    description?: StringNullableFilter<"Exercise"> | string | null
    questionImageUrl?: StringNullableFilter<"Exercise"> | string | null
    type?: StringNullableFilter<"Exercise"> | string | null
    isActive?: BoolFilter<"Exercise"> | boolean
    nodeExercises?: NodeExerciseListRelationFilter
    userProgress?: UserExerciseProgressListRelationFilter
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    difficulty?: SortOrder
    hints?: SortOrder
    solution?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    questionImageUrl?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    isActive?: SortOrder
    nodeExercises?: NodeExerciseOrderByRelationAggregateInput
    userProgress?: UserExerciseProgressOrderByRelationAggregateInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    name?: StringFilter<"Exercise"> | string
    difficulty?: StringFilter<"Exercise"> | string
    hints?: StringNullableListFilter<"Exercise">
    solution?: StringNullableFilter<"Exercise"> | string | null
    videoUrl?: StringNullableFilter<"Exercise"> | string | null
    description?: StringNullableFilter<"Exercise"> | string | null
    questionImageUrl?: StringNullableFilter<"Exercise"> | string | null
    type?: StringNullableFilter<"Exercise"> | string | null
    isActive?: BoolFilter<"Exercise"> | boolean
    nodeExercises?: NodeExerciseListRelationFilter
    userProgress?: UserExerciseProgressListRelationFilter
  }, "id">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    difficulty?: SortOrder
    hints?: SortOrder
    solution?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    questionImageUrl?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    isActive?: SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercise"> | string
    name?: StringWithAggregatesFilter<"Exercise"> | string
    difficulty?: StringWithAggregatesFilter<"Exercise"> | string
    hints?: StringNullableListFilter<"Exercise">
    solution?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    videoUrl?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    description?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    questionImageUrl?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    type?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    isActive?: BoolWithAggregatesFilter<"Exercise"> | boolean
  }

  export type NodeExerciseWhereInput = {
    AND?: NodeExerciseWhereInput | NodeExerciseWhereInput[]
    OR?: NodeExerciseWhereInput[]
    NOT?: NodeExerciseWhereInput | NodeExerciseWhereInput[]
    nodeId?: StringFilter<"NodeExercise"> | string
    exerciseId?: StringFilter<"NodeExercise"> | string
    orderIndex?: IntNullableFilter<"NodeExercise"> | number | null
    node?: XOR<RoadmapNodeScalarRelationFilter, RoadmapNodeWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
  }

  export type NodeExerciseOrderByWithRelationInput = {
    nodeId?: SortOrder
    exerciseId?: SortOrder
    orderIndex?: SortOrderInput | SortOrder
    node?: RoadmapNodeOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
  }

  export type NodeExerciseWhereUniqueInput = Prisma.AtLeast<{
    nodeId_exerciseId?: NodeExerciseNodeIdExerciseIdCompoundUniqueInput
    AND?: NodeExerciseWhereInput | NodeExerciseWhereInput[]
    OR?: NodeExerciseWhereInput[]
    NOT?: NodeExerciseWhereInput | NodeExerciseWhereInput[]
    nodeId?: StringFilter<"NodeExercise"> | string
    exerciseId?: StringFilter<"NodeExercise"> | string
    orderIndex?: IntNullableFilter<"NodeExercise"> | number | null
    node?: XOR<RoadmapNodeScalarRelationFilter, RoadmapNodeWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
  }, "nodeId_exerciseId">

  export type NodeExerciseOrderByWithAggregationInput = {
    nodeId?: SortOrder
    exerciseId?: SortOrder
    orderIndex?: SortOrderInput | SortOrder
    _count?: NodeExerciseCountOrderByAggregateInput
    _avg?: NodeExerciseAvgOrderByAggregateInput
    _max?: NodeExerciseMaxOrderByAggregateInput
    _min?: NodeExerciseMinOrderByAggregateInput
    _sum?: NodeExerciseSumOrderByAggregateInput
  }

  export type NodeExerciseScalarWhereWithAggregatesInput = {
    AND?: NodeExerciseScalarWhereWithAggregatesInput | NodeExerciseScalarWhereWithAggregatesInput[]
    OR?: NodeExerciseScalarWhereWithAggregatesInput[]
    NOT?: NodeExerciseScalarWhereWithAggregatesInput | NodeExerciseScalarWhereWithAggregatesInput[]
    nodeId?: StringWithAggregatesFilter<"NodeExercise"> | string
    exerciseId?: StringWithAggregatesFilter<"NodeExercise"> | string
    orderIndex?: IntNullableWithAggregatesFilter<"NodeExercise"> | number | null
  }

  export type UserExerciseProgressWhereInput = {
    AND?: UserExerciseProgressWhereInput | UserExerciseProgressWhereInput[]
    OR?: UserExerciseProgressWhereInput[]
    NOT?: UserExerciseProgressWhereInput | UserExerciseProgressWhereInput[]
    userId?: StringFilter<"UserExerciseProgress"> | string
    exerciseId?: StringFilter<"UserExerciseProgress"> | string
    completed?: BoolFilter<"UserExerciseProgress"> | boolean
    completedAt?: DateTimeNullableFilter<"UserExerciseProgress"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
  }

  export type UserExerciseProgressOrderByWithRelationInput = {
    userId?: SortOrder
    exerciseId?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
  }

  export type UserExerciseProgressWhereUniqueInput = Prisma.AtLeast<{
    userId_exerciseId?: UserExerciseProgressUserIdExerciseIdCompoundUniqueInput
    AND?: UserExerciseProgressWhereInput | UserExerciseProgressWhereInput[]
    OR?: UserExerciseProgressWhereInput[]
    NOT?: UserExerciseProgressWhereInput | UserExerciseProgressWhereInput[]
    userId?: StringFilter<"UserExerciseProgress"> | string
    exerciseId?: StringFilter<"UserExerciseProgress"> | string
    completed?: BoolFilter<"UserExerciseProgress"> | boolean
    completedAt?: DateTimeNullableFilter<"UserExerciseProgress"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
  }, "userId_exerciseId">

  export type UserExerciseProgressOrderByWithAggregationInput = {
    userId?: SortOrder
    exerciseId?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: UserExerciseProgressCountOrderByAggregateInput
    _max?: UserExerciseProgressMaxOrderByAggregateInput
    _min?: UserExerciseProgressMinOrderByAggregateInput
  }

  export type UserExerciseProgressScalarWhereWithAggregatesInput = {
    AND?: UserExerciseProgressScalarWhereWithAggregatesInput | UserExerciseProgressScalarWhereWithAggregatesInput[]
    OR?: UserExerciseProgressScalarWhereWithAggregatesInput[]
    NOT?: UserExerciseProgressScalarWhereWithAggregatesInput | UserExerciseProgressScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserExerciseProgress"> | string
    exerciseId?: StringWithAggregatesFilter<"UserExerciseProgress"> | string
    completed?: BoolWithAggregatesFilter<"UserExerciseProgress"> | boolean
    completedAt?: DateTimeNullableWithAggregatesFilter<"UserExerciseProgress"> | Date | string | null
  }

  export type UserCreateInput = {
    id: string
    email: string
    name?: string | null
    image?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    exerciseProgress?: UserExerciseProgressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    email: string
    name?: string | null
    image?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    exerciseProgress?: UserExerciseProgressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseProgress?: UserExerciseProgressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseProgress?: UserExerciseProgressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    email: string
    name?: string | null
    image?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapCreateInput = {
    id?: string
    title: string
    description?: string | null
    category?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    nodes?: RoadmapNodeCreateNestedManyWithoutRoadmapInput
    edges?: RoadmapEdgeCreateNestedManyWithoutRoadmapInput
  }

  export type RoadmapUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    category?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    nodes?: RoadmapNodeUncheckedCreateNestedManyWithoutRoadmapInput
    edges?: RoadmapEdgeUncheckedCreateNestedManyWithoutRoadmapInput
  }

  export type RoadmapUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: RoadmapNodeUpdateManyWithoutRoadmapNestedInput
    edges?: RoadmapEdgeUpdateManyWithoutRoadmapNestedInput
  }

  export type RoadmapUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: RoadmapNodeUncheckedUpdateManyWithoutRoadmapNestedInput
    edges?: RoadmapEdgeUncheckedUpdateManyWithoutRoadmapNestedInput
  }

  export type RoadmapCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    category?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type RoadmapUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoadmapNodeCreateInput = {
    id?: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    roadmap: RoadmapCreateNestedOneWithoutNodesInput
    edgesSource?: RoadmapEdgeCreateNestedManyWithoutSourceNodeInput
    edgesTarget?: RoadmapEdgeCreateNestedManyWithoutTargetNodeInput
    exercises?: NodeExerciseCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeUncheckedCreateInput = {
    id?: string
    roadmapId: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    edgesSource?: RoadmapEdgeUncheckedCreateNestedManyWithoutSourceNodeInput
    edgesTarget?: RoadmapEdgeUncheckedCreateNestedManyWithoutTargetNodeInput
    exercises?: NodeExerciseUncheckedCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    roadmap?: RoadmapUpdateOneRequiredWithoutNodesNestedInput
    edgesSource?: RoadmapEdgeUpdateManyWithoutSourceNodeNestedInput
    edgesTarget?: RoadmapEdgeUpdateManyWithoutTargetNodeNestedInput
    exercises?: NodeExerciseUpdateManyWithoutNodeNestedInput
  }

  export type RoadmapNodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    edgesSource?: RoadmapEdgeUncheckedUpdateManyWithoutSourceNodeNestedInput
    edgesTarget?: RoadmapEdgeUncheckedUpdateManyWithoutTargetNodeNestedInput
    exercises?: NodeExerciseUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type RoadmapNodeCreateManyInput = {
    id?: string
    roadmapId: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
  }

  export type RoadmapNodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RoadmapNodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RoadmapEdgeCreateInput = {
    id?: string
    roadmap: RoadmapCreateNestedOneWithoutEdgesInput
    sourceNode: RoadmapNodeCreateNestedOneWithoutEdgesSourceInput
    targetNode: RoadmapNodeCreateNestedOneWithoutEdgesTargetInput
  }

  export type RoadmapEdgeUncheckedCreateInput = {
    id?: string
    roadmapId: string
    sourceNodeId: string
    targetNodeId: string
  }

  export type RoadmapEdgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmap?: RoadmapUpdateOneRequiredWithoutEdgesNestedInput
    sourceNode?: RoadmapNodeUpdateOneRequiredWithoutEdgesSourceNestedInput
    targetNode?: RoadmapNodeUpdateOneRequiredWithoutEdgesTargetNestedInput
  }

  export type RoadmapEdgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    sourceNodeId?: StringFieldUpdateOperationsInput | string
    targetNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type RoadmapEdgeCreateManyInput = {
    id?: string
    roadmapId: string
    sourceNodeId: string
    targetNodeId: string
  }

  export type RoadmapEdgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type RoadmapEdgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    sourceNodeId?: StringFieldUpdateOperationsInput | string
    targetNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateInput = {
    id: string
    name: string
    difficulty: string
    hints?: ExerciseCreatehintsInput | string[]
    solution?: string | null
    videoUrl?: string | null
    description?: string | null
    questionImageUrl?: string | null
    type?: string | null
    isActive?: boolean
    nodeExercises?: NodeExerciseCreateNestedManyWithoutExerciseInput
    userProgress?: UserExerciseProgressCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateInput = {
    id: string
    name: string
    difficulty: string
    hints?: ExerciseCreatehintsInput | string[]
    solution?: string | null
    videoUrl?: string | null
    description?: string | null
    questionImageUrl?: string | null
    type?: string | null
    isActive?: boolean
    nodeExercises?: NodeExerciseUncheckedCreateNestedManyWithoutExerciseInput
    userProgress?: UserExerciseProgressUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nodeExercises?: NodeExerciseUpdateManyWithoutExerciseNestedInput
    userProgress?: UserExerciseProgressUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nodeExercises?: NodeExerciseUncheckedUpdateManyWithoutExerciseNestedInput
    userProgress?: UserExerciseProgressUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateManyInput = {
    id: string
    name: string
    difficulty: string
    hints?: ExerciseCreatehintsInput | string[]
    solution?: string | null
    videoUrl?: string | null
    description?: string | null
    questionImageUrl?: string | null
    type?: string | null
    isActive?: boolean
  }

  export type ExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NodeExerciseCreateInput = {
    orderIndex?: number | null
    node: RoadmapNodeCreateNestedOneWithoutExercisesInput
    exercise: ExerciseCreateNestedOneWithoutNodeExercisesInput
  }

  export type NodeExerciseUncheckedCreateInput = {
    nodeId: string
    exerciseId: string
    orderIndex?: number | null
  }

  export type NodeExerciseUpdateInput = {
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    node?: RoadmapNodeUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutNodeExercisesNestedInput
  }

  export type NodeExerciseUncheckedUpdateInput = {
    nodeId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NodeExerciseCreateManyInput = {
    nodeId: string
    exerciseId: string
    orderIndex?: number | null
  }

  export type NodeExerciseUpdateManyMutationInput = {
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NodeExerciseUncheckedUpdateManyInput = {
    nodeId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserExerciseProgressCreateInput = {
    completed?: boolean
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutExerciseProgressInput
    exercise: ExerciseCreateNestedOneWithoutUserProgressInput
  }

  export type UserExerciseProgressUncheckedCreateInput = {
    userId: string
    exerciseId: string
    completed?: boolean
    completedAt?: Date | string | null
  }

  export type UserExerciseProgressUpdateInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutExerciseProgressNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutUserProgressNestedInput
  }

  export type UserExerciseProgressUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserExerciseProgressCreateManyInput = {
    userId: string
    exerciseId: string
    completed?: boolean
    completedAt?: Date | string | null
  }

  export type UserExerciseProgressUpdateManyMutationInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserExerciseProgressUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserExerciseProgressListRelationFilter = {
    every?: UserExerciseProgressWhereInput
    some?: UserExerciseProgressWhereInput
    none?: UserExerciseProgressWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserExerciseProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RoadmapNodeListRelationFilter = {
    every?: RoadmapNodeWhereInput
    some?: RoadmapNodeWhereInput
    none?: RoadmapNodeWhereInput
  }

  export type RoadmapEdgeListRelationFilter = {
    every?: RoadmapEdgeWhereInput
    some?: RoadmapEdgeWhereInput
    none?: RoadmapEdgeWhereInput
  }

  export type RoadmapNodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoadmapEdgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoadmapCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type RoadmapMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RoadmapScalarRelationFilter = {
    is?: RoadmapWhereInput
    isNot?: RoadmapWhereInput
  }

  export type NodeExerciseListRelationFilter = {
    every?: NodeExerciseWhereInput
    some?: NodeExerciseWhereInput
    none?: NodeExerciseWhereInput
  }

  export type NodeExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoadmapNodeCountOrderByAggregateInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    label?: SortOrder
    description?: SortOrder
    type?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
  }

  export type RoadmapNodeAvgOrderByAggregateInput = {
    positionX?: SortOrder
    positionY?: SortOrder
  }

  export type RoadmapNodeMaxOrderByAggregateInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    label?: SortOrder
    description?: SortOrder
    type?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
  }

  export type RoadmapNodeMinOrderByAggregateInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    label?: SortOrder
    description?: SortOrder
    type?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
  }

  export type RoadmapNodeSumOrderByAggregateInput = {
    positionX?: SortOrder
    positionY?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type RoadmapNodeScalarRelationFilter = {
    is?: RoadmapNodeWhereInput
    isNot?: RoadmapNodeWhereInput
  }

  export type RoadmapEdgeCountOrderByAggregateInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    sourceNodeId?: SortOrder
    targetNodeId?: SortOrder
  }

  export type RoadmapEdgeMaxOrderByAggregateInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    sourceNodeId?: SortOrder
    targetNodeId?: SortOrder
  }

  export type RoadmapEdgeMinOrderByAggregateInput = {
    id?: SortOrder
    roadmapId?: SortOrder
    sourceNodeId?: SortOrder
    targetNodeId?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    difficulty?: SortOrder
    hints?: SortOrder
    solution?: SortOrder
    videoUrl?: SortOrder
    description?: SortOrder
    questionImageUrl?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    difficulty?: SortOrder
    solution?: SortOrder
    videoUrl?: SortOrder
    description?: SortOrder
    questionImageUrl?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    difficulty?: SortOrder
    solution?: SortOrder
    videoUrl?: SortOrder
    description?: SortOrder
    questionImageUrl?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ExerciseScalarRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type NodeExerciseNodeIdExerciseIdCompoundUniqueInput = {
    nodeId: string
    exerciseId: string
  }

  export type NodeExerciseCountOrderByAggregateInput = {
    nodeId?: SortOrder
    exerciseId?: SortOrder
    orderIndex?: SortOrder
  }

  export type NodeExerciseAvgOrderByAggregateInput = {
    orderIndex?: SortOrder
  }

  export type NodeExerciseMaxOrderByAggregateInput = {
    nodeId?: SortOrder
    exerciseId?: SortOrder
    orderIndex?: SortOrder
  }

  export type NodeExerciseMinOrderByAggregateInput = {
    nodeId?: SortOrder
    exerciseId?: SortOrder
    orderIndex?: SortOrder
  }

  export type NodeExerciseSumOrderByAggregateInput = {
    orderIndex?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserExerciseProgressUserIdExerciseIdCompoundUniqueInput = {
    userId: string
    exerciseId: string
  }

  export type UserExerciseProgressCountOrderByAggregateInput = {
    userId?: SortOrder
    exerciseId?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
  }

  export type UserExerciseProgressMaxOrderByAggregateInput = {
    userId?: SortOrder
    exerciseId?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
  }

  export type UserExerciseProgressMinOrderByAggregateInput = {
    userId?: SortOrder
    exerciseId?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserExerciseProgressCreateNestedManyWithoutUserInput = {
    create?: XOR<UserExerciseProgressCreateWithoutUserInput, UserExerciseProgressUncheckedCreateWithoutUserInput> | UserExerciseProgressCreateWithoutUserInput[] | UserExerciseProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutUserInput | UserExerciseProgressCreateOrConnectWithoutUserInput[]
    createMany?: UserExerciseProgressCreateManyUserInputEnvelope
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
  }

  export type UserExerciseProgressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserExerciseProgressCreateWithoutUserInput, UserExerciseProgressUncheckedCreateWithoutUserInput> | UserExerciseProgressCreateWithoutUserInput[] | UserExerciseProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutUserInput | UserExerciseProgressCreateOrConnectWithoutUserInput[]
    createMany?: UserExerciseProgressCreateManyUserInputEnvelope
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserExerciseProgressUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserExerciseProgressCreateWithoutUserInput, UserExerciseProgressUncheckedCreateWithoutUserInput> | UserExerciseProgressCreateWithoutUserInput[] | UserExerciseProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutUserInput | UserExerciseProgressCreateOrConnectWithoutUserInput[]
    upsert?: UserExerciseProgressUpsertWithWhereUniqueWithoutUserInput | UserExerciseProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserExerciseProgressCreateManyUserInputEnvelope
    set?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    disconnect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    delete?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    update?: UserExerciseProgressUpdateWithWhereUniqueWithoutUserInput | UserExerciseProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserExerciseProgressUpdateManyWithWhereWithoutUserInput | UserExerciseProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserExerciseProgressScalarWhereInput | UserExerciseProgressScalarWhereInput[]
  }

  export type UserExerciseProgressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserExerciseProgressCreateWithoutUserInput, UserExerciseProgressUncheckedCreateWithoutUserInput> | UserExerciseProgressCreateWithoutUserInput[] | UserExerciseProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutUserInput | UserExerciseProgressCreateOrConnectWithoutUserInput[]
    upsert?: UserExerciseProgressUpsertWithWhereUniqueWithoutUserInput | UserExerciseProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserExerciseProgressCreateManyUserInputEnvelope
    set?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    disconnect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    delete?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    update?: UserExerciseProgressUpdateWithWhereUniqueWithoutUserInput | UserExerciseProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserExerciseProgressUpdateManyWithWhereWithoutUserInput | UserExerciseProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserExerciseProgressScalarWhereInput | UserExerciseProgressScalarWhereInput[]
  }

  export type RoadmapNodeCreateNestedManyWithoutRoadmapInput = {
    create?: XOR<RoadmapNodeCreateWithoutRoadmapInput, RoadmapNodeUncheckedCreateWithoutRoadmapInput> | RoadmapNodeCreateWithoutRoadmapInput[] | RoadmapNodeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutRoadmapInput | RoadmapNodeCreateOrConnectWithoutRoadmapInput[]
    createMany?: RoadmapNodeCreateManyRoadmapInputEnvelope
    connect?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
  }

  export type RoadmapEdgeCreateNestedManyWithoutRoadmapInput = {
    create?: XOR<RoadmapEdgeCreateWithoutRoadmapInput, RoadmapEdgeUncheckedCreateWithoutRoadmapInput> | RoadmapEdgeCreateWithoutRoadmapInput[] | RoadmapEdgeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutRoadmapInput | RoadmapEdgeCreateOrConnectWithoutRoadmapInput[]
    createMany?: RoadmapEdgeCreateManyRoadmapInputEnvelope
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
  }

  export type RoadmapNodeUncheckedCreateNestedManyWithoutRoadmapInput = {
    create?: XOR<RoadmapNodeCreateWithoutRoadmapInput, RoadmapNodeUncheckedCreateWithoutRoadmapInput> | RoadmapNodeCreateWithoutRoadmapInput[] | RoadmapNodeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutRoadmapInput | RoadmapNodeCreateOrConnectWithoutRoadmapInput[]
    createMany?: RoadmapNodeCreateManyRoadmapInputEnvelope
    connect?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
  }

  export type RoadmapEdgeUncheckedCreateNestedManyWithoutRoadmapInput = {
    create?: XOR<RoadmapEdgeCreateWithoutRoadmapInput, RoadmapEdgeUncheckedCreateWithoutRoadmapInput> | RoadmapEdgeCreateWithoutRoadmapInput[] | RoadmapEdgeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutRoadmapInput | RoadmapEdgeCreateOrConnectWithoutRoadmapInput[]
    createMany?: RoadmapEdgeCreateManyRoadmapInputEnvelope
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
  }

  export type RoadmapNodeUpdateManyWithoutRoadmapNestedInput = {
    create?: XOR<RoadmapNodeCreateWithoutRoadmapInput, RoadmapNodeUncheckedCreateWithoutRoadmapInput> | RoadmapNodeCreateWithoutRoadmapInput[] | RoadmapNodeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutRoadmapInput | RoadmapNodeCreateOrConnectWithoutRoadmapInput[]
    upsert?: RoadmapNodeUpsertWithWhereUniqueWithoutRoadmapInput | RoadmapNodeUpsertWithWhereUniqueWithoutRoadmapInput[]
    createMany?: RoadmapNodeCreateManyRoadmapInputEnvelope
    set?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    disconnect?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    delete?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    connect?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    update?: RoadmapNodeUpdateWithWhereUniqueWithoutRoadmapInput | RoadmapNodeUpdateWithWhereUniqueWithoutRoadmapInput[]
    updateMany?: RoadmapNodeUpdateManyWithWhereWithoutRoadmapInput | RoadmapNodeUpdateManyWithWhereWithoutRoadmapInput[]
    deleteMany?: RoadmapNodeScalarWhereInput | RoadmapNodeScalarWhereInput[]
  }

  export type RoadmapEdgeUpdateManyWithoutRoadmapNestedInput = {
    create?: XOR<RoadmapEdgeCreateWithoutRoadmapInput, RoadmapEdgeUncheckedCreateWithoutRoadmapInput> | RoadmapEdgeCreateWithoutRoadmapInput[] | RoadmapEdgeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutRoadmapInput | RoadmapEdgeCreateOrConnectWithoutRoadmapInput[]
    upsert?: RoadmapEdgeUpsertWithWhereUniqueWithoutRoadmapInput | RoadmapEdgeUpsertWithWhereUniqueWithoutRoadmapInput[]
    createMany?: RoadmapEdgeCreateManyRoadmapInputEnvelope
    set?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    disconnect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    delete?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    update?: RoadmapEdgeUpdateWithWhereUniqueWithoutRoadmapInput | RoadmapEdgeUpdateWithWhereUniqueWithoutRoadmapInput[]
    updateMany?: RoadmapEdgeUpdateManyWithWhereWithoutRoadmapInput | RoadmapEdgeUpdateManyWithWhereWithoutRoadmapInput[]
    deleteMany?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
  }

  export type RoadmapNodeUncheckedUpdateManyWithoutRoadmapNestedInput = {
    create?: XOR<RoadmapNodeCreateWithoutRoadmapInput, RoadmapNodeUncheckedCreateWithoutRoadmapInput> | RoadmapNodeCreateWithoutRoadmapInput[] | RoadmapNodeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutRoadmapInput | RoadmapNodeCreateOrConnectWithoutRoadmapInput[]
    upsert?: RoadmapNodeUpsertWithWhereUniqueWithoutRoadmapInput | RoadmapNodeUpsertWithWhereUniqueWithoutRoadmapInput[]
    createMany?: RoadmapNodeCreateManyRoadmapInputEnvelope
    set?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    disconnect?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    delete?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    connect?: RoadmapNodeWhereUniqueInput | RoadmapNodeWhereUniqueInput[]
    update?: RoadmapNodeUpdateWithWhereUniqueWithoutRoadmapInput | RoadmapNodeUpdateWithWhereUniqueWithoutRoadmapInput[]
    updateMany?: RoadmapNodeUpdateManyWithWhereWithoutRoadmapInput | RoadmapNodeUpdateManyWithWhereWithoutRoadmapInput[]
    deleteMany?: RoadmapNodeScalarWhereInput | RoadmapNodeScalarWhereInput[]
  }

  export type RoadmapEdgeUncheckedUpdateManyWithoutRoadmapNestedInput = {
    create?: XOR<RoadmapEdgeCreateWithoutRoadmapInput, RoadmapEdgeUncheckedCreateWithoutRoadmapInput> | RoadmapEdgeCreateWithoutRoadmapInput[] | RoadmapEdgeUncheckedCreateWithoutRoadmapInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutRoadmapInput | RoadmapEdgeCreateOrConnectWithoutRoadmapInput[]
    upsert?: RoadmapEdgeUpsertWithWhereUniqueWithoutRoadmapInput | RoadmapEdgeUpsertWithWhereUniqueWithoutRoadmapInput[]
    createMany?: RoadmapEdgeCreateManyRoadmapInputEnvelope
    set?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    disconnect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    delete?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    update?: RoadmapEdgeUpdateWithWhereUniqueWithoutRoadmapInput | RoadmapEdgeUpdateWithWhereUniqueWithoutRoadmapInput[]
    updateMany?: RoadmapEdgeUpdateManyWithWhereWithoutRoadmapInput | RoadmapEdgeUpdateManyWithWhereWithoutRoadmapInput[]
    deleteMany?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
  }

  export type RoadmapCreateNestedOneWithoutNodesInput = {
    create?: XOR<RoadmapCreateWithoutNodesInput, RoadmapUncheckedCreateWithoutNodesInput>
    connectOrCreate?: RoadmapCreateOrConnectWithoutNodesInput
    connect?: RoadmapWhereUniqueInput
  }

  export type RoadmapEdgeCreateNestedManyWithoutSourceNodeInput = {
    create?: XOR<RoadmapEdgeCreateWithoutSourceNodeInput, RoadmapEdgeUncheckedCreateWithoutSourceNodeInput> | RoadmapEdgeCreateWithoutSourceNodeInput[] | RoadmapEdgeUncheckedCreateWithoutSourceNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutSourceNodeInput | RoadmapEdgeCreateOrConnectWithoutSourceNodeInput[]
    createMany?: RoadmapEdgeCreateManySourceNodeInputEnvelope
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
  }

  export type RoadmapEdgeCreateNestedManyWithoutTargetNodeInput = {
    create?: XOR<RoadmapEdgeCreateWithoutTargetNodeInput, RoadmapEdgeUncheckedCreateWithoutTargetNodeInput> | RoadmapEdgeCreateWithoutTargetNodeInput[] | RoadmapEdgeUncheckedCreateWithoutTargetNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutTargetNodeInput | RoadmapEdgeCreateOrConnectWithoutTargetNodeInput[]
    createMany?: RoadmapEdgeCreateManyTargetNodeInputEnvelope
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
  }

  export type NodeExerciseCreateNestedManyWithoutNodeInput = {
    create?: XOR<NodeExerciseCreateWithoutNodeInput, NodeExerciseUncheckedCreateWithoutNodeInput> | NodeExerciseCreateWithoutNodeInput[] | NodeExerciseUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutNodeInput | NodeExerciseCreateOrConnectWithoutNodeInput[]
    createMany?: NodeExerciseCreateManyNodeInputEnvelope
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
  }

  export type RoadmapEdgeUncheckedCreateNestedManyWithoutSourceNodeInput = {
    create?: XOR<RoadmapEdgeCreateWithoutSourceNodeInput, RoadmapEdgeUncheckedCreateWithoutSourceNodeInput> | RoadmapEdgeCreateWithoutSourceNodeInput[] | RoadmapEdgeUncheckedCreateWithoutSourceNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutSourceNodeInput | RoadmapEdgeCreateOrConnectWithoutSourceNodeInput[]
    createMany?: RoadmapEdgeCreateManySourceNodeInputEnvelope
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
  }

  export type RoadmapEdgeUncheckedCreateNestedManyWithoutTargetNodeInput = {
    create?: XOR<RoadmapEdgeCreateWithoutTargetNodeInput, RoadmapEdgeUncheckedCreateWithoutTargetNodeInput> | RoadmapEdgeCreateWithoutTargetNodeInput[] | RoadmapEdgeUncheckedCreateWithoutTargetNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutTargetNodeInput | RoadmapEdgeCreateOrConnectWithoutTargetNodeInput[]
    createMany?: RoadmapEdgeCreateManyTargetNodeInputEnvelope
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
  }

  export type NodeExerciseUncheckedCreateNestedManyWithoutNodeInput = {
    create?: XOR<NodeExerciseCreateWithoutNodeInput, NodeExerciseUncheckedCreateWithoutNodeInput> | NodeExerciseCreateWithoutNodeInput[] | NodeExerciseUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutNodeInput | NodeExerciseCreateOrConnectWithoutNodeInput[]
    createMany?: NodeExerciseCreateManyNodeInputEnvelope
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RoadmapUpdateOneRequiredWithoutNodesNestedInput = {
    create?: XOR<RoadmapCreateWithoutNodesInput, RoadmapUncheckedCreateWithoutNodesInput>
    connectOrCreate?: RoadmapCreateOrConnectWithoutNodesInput
    upsert?: RoadmapUpsertWithoutNodesInput
    connect?: RoadmapWhereUniqueInput
    update?: XOR<XOR<RoadmapUpdateToOneWithWhereWithoutNodesInput, RoadmapUpdateWithoutNodesInput>, RoadmapUncheckedUpdateWithoutNodesInput>
  }

  export type RoadmapEdgeUpdateManyWithoutSourceNodeNestedInput = {
    create?: XOR<RoadmapEdgeCreateWithoutSourceNodeInput, RoadmapEdgeUncheckedCreateWithoutSourceNodeInput> | RoadmapEdgeCreateWithoutSourceNodeInput[] | RoadmapEdgeUncheckedCreateWithoutSourceNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutSourceNodeInput | RoadmapEdgeCreateOrConnectWithoutSourceNodeInput[]
    upsert?: RoadmapEdgeUpsertWithWhereUniqueWithoutSourceNodeInput | RoadmapEdgeUpsertWithWhereUniqueWithoutSourceNodeInput[]
    createMany?: RoadmapEdgeCreateManySourceNodeInputEnvelope
    set?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    disconnect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    delete?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    update?: RoadmapEdgeUpdateWithWhereUniqueWithoutSourceNodeInput | RoadmapEdgeUpdateWithWhereUniqueWithoutSourceNodeInput[]
    updateMany?: RoadmapEdgeUpdateManyWithWhereWithoutSourceNodeInput | RoadmapEdgeUpdateManyWithWhereWithoutSourceNodeInput[]
    deleteMany?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
  }

  export type RoadmapEdgeUpdateManyWithoutTargetNodeNestedInput = {
    create?: XOR<RoadmapEdgeCreateWithoutTargetNodeInput, RoadmapEdgeUncheckedCreateWithoutTargetNodeInput> | RoadmapEdgeCreateWithoutTargetNodeInput[] | RoadmapEdgeUncheckedCreateWithoutTargetNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutTargetNodeInput | RoadmapEdgeCreateOrConnectWithoutTargetNodeInput[]
    upsert?: RoadmapEdgeUpsertWithWhereUniqueWithoutTargetNodeInput | RoadmapEdgeUpsertWithWhereUniqueWithoutTargetNodeInput[]
    createMany?: RoadmapEdgeCreateManyTargetNodeInputEnvelope
    set?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    disconnect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    delete?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    update?: RoadmapEdgeUpdateWithWhereUniqueWithoutTargetNodeInput | RoadmapEdgeUpdateWithWhereUniqueWithoutTargetNodeInput[]
    updateMany?: RoadmapEdgeUpdateManyWithWhereWithoutTargetNodeInput | RoadmapEdgeUpdateManyWithWhereWithoutTargetNodeInput[]
    deleteMany?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
  }

  export type NodeExerciseUpdateManyWithoutNodeNestedInput = {
    create?: XOR<NodeExerciseCreateWithoutNodeInput, NodeExerciseUncheckedCreateWithoutNodeInput> | NodeExerciseCreateWithoutNodeInput[] | NodeExerciseUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutNodeInput | NodeExerciseCreateOrConnectWithoutNodeInput[]
    upsert?: NodeExerciseUpsertWithWhereUniqueWithoutNodeInput | NodeExerciseUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: NodeExerciseCreateManyNodeInputEnvelope
    set?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    disconnect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    delete?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    update?: NodeExerciseUpdateWithWhereUniqueWithoutNodeInput | NodeExerciseUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: NodeExerciseUpdateManyWithWhereWithoutNodeInput | NodeExerciseUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: NodeExerciseScalarWhereInput | NodeExerciseScalarWhereInput[]
  }

  export type RoadmapEdgeUncheckedUpdateManyWithoutSourceNodeNestedInput = {
    create?: XOR<RoadmapEdgeCreateWithoutSourceNodeInput, RoadmapEdgeUncheckedCreateWithoutSourceNodeInput> | RoadmapEdgeCreateWithoutSourceNodeInput[] | RoadmapEdgeUncheckedCreateWithoutSourceNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutSourceNodeInput | RoadmapEdgeCreateOrConnectWithoutSourceNodeInput[]
    upsert?: RoadmapEdgeUpsertWithWhereUniqueWithoutSourceNodeInput | RoadmapEdgeUpsertWithWhereUniqueWithoutSourceNodeInput[]
    createMany?: RoadmapEdgeCreateManySourceNodeInputEnvelope
    set?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    disconnect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    delete?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    update?: RoadmapEdgeUpdateWithWhereUniqueWithoutSourceNodeInput | RoadmapEdgeUpdateWithWhereUniqueWithoutSourceNodeInput[]
    updateMany?: RoadmapEdgeUpdateManyWithWhereWithoutSourceNodeInput | RoadmapEdgeUpdateManyWithWhereWithoutSourceNodeInput[]
    deleteMany?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
  }

  export type RoadmapEdgeUncheckedUpdateManyWithoutTargetNodeNestedInput = {
    create?: XOR<RoadmapEdgeCreateWithoutTargetNodeInput, RoadmapEdgeUncheckedCreateWithoutTargetNodeInput> | RoadmapEdgeCreateWithoutTargetNodeInput[] | RoadmapEdgeUncheckedCreateWithoutTargetNodeInput[]
    connectOrCreate?: RoadmapEdgeCreateOrConnectWithoutTargetNodeInput | RoadmapEdgeCreateOrConnectWithoutTargetNodeInput[]
    upsert?: RoadmapEdgeUpsertWithWhereUniqueWithoutTargetNodeInput | RoadmapEdgeUpsertWithWhereUniqueWithoutTargetNodeInput[]
    createMany?: RoadmapEdgeCreateManyTargetNodeInputEnvelope
    set?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    disconnect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    delete?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    connect?: RoadmapEdgeWhereUniqueInput | RoadmapEdgeWhereUniqueInput[]
    update?: RoadmapEdgeUpdateWithWhereUniqueWithoutTargetNodeInput | RoadmapEdgeUpdateWithWhereUniqueWithoutTargetNodeInput[]
    updateMany?: RoadmapEdgeUpdateManyWithWhereWithoutTargetNodeInput | RoadmapEdgeUpdateManyWithWhereWithoutTargetNodeInput[]
    deleteMany?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
  }

  export type NodeExerciseUncheckedUpdateManyWithoutNodeNestedInput = {
    create?: XOR<NodeExerciseCreateWithoutNodeInput, NodeExerciseUncheckedCreateWithoutNodeInput> | NodeExerciseCreateWithoutNodeInput[] | NodeExerciseUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutNodeInput | NodeExerciseCreateOrConnectWithoutNodeInput[]
    upsert?: NodeExerciseUpsertWithWhereUniqueWithoutNodeInput | NodeExerciseUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: NodeExerciseCreateManyNodeInputEnvelope
    set?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    disconnect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    delete?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    update?: NodeExerciseUpdateWithWhereUniqueWithoutNodeInput | NodeExerciseUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: NodeExerciseUpdateManyWithWhereWithoutNodeInput | NodeExerciseUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: NodeExerciseScalarWhereInput | NodeExerciseScalarWhereInput[]
  }

  export type RoadmapCreateNestedOneWithoutEdgesInput = {
    create?: XOR<RoadmapCreateWithoutEdgesInput, RoadmapUncheckedCreateWithoutEdgesInput>
    connectOrCreate?: RoadmapCreateOrConnectWithoutEdgesInput
    connect?: RoadmapWhereUniqueInput
  }

  export type RoadmapNodeCreateNestedOneWithoutEdgesSourceInput = {
    create?: XOR<RoadmapNodeCreateWithoutEdgesSourceInput, RoadmapNodeUncheckedCreateWithoutEdgesSourceInput>
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutEdgesSourceInput
    connect?: RoadmapNodeWhereUniqueInput
  }

  export type RoadmapNodeCreateNestedOneWithoutEdgesTargetInput = {
    create?: XOR<RoadmapNodeCreateWithoutEdgesTargetInput, RoadmapNodeUncheckedCreateWithoutEdgesTargetInput>
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutEdgesTargetInput
    connect?: RoadmapNodeWhereUniqueInput
  }

  export type RoadmapUpdateOneRequiredWithoutEdgesNestedInput = {
    create?: XOR<RoadmapCreateWithoutEdgesInput, RoadmapUncheckedCreateWithoutEdgesInput>
    connectOrCreate?: RoadmapCreateOrConnectWithoutEdgesInput
    upsert?: RoadmapUpsertWithoutEdgesInput
    connect?: RoadmapWhereUniqueInput
    update?: XOR<XOR<RoadmapUpdateToOneWithWhereWithoutEdgesInput, RoadmapUpdateWithoutEdgesInput>, RoadmapUncheckedUpdateWithoutEdgesInput>
  }

  export type RoadmapNodeUpdateOneRequiredWithoutEdgesSourceNestedInput = {
    create?: XOR<RoadmapNodeCreateWithoutEdgesSourceInput, RoadmapNodeUncheckedCreateWithoutEdgesSourceInput>
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutEdgesSourceInput
    upsert?: RoadmapNodeUpsertWithoutEdgesSourceInput
    connect?: RoadmapNodeWhereUniqueInput
    update?: XOR<XOR<RoadmapNodeUpdateToOneWithWhereWithoutEdgesSourceInput, RoadmapNodeUpdateWithoutEdgesSourceInput>, RoadmapNodeUncheckedUpdateWithoutEdgesSourceInput>
  }

  export type RoadmapNodeUpdateOneRequiredWithoutEdgesTargetNestedInput = {
    create?: XOR<RoadmapNodeCreateWithoutEdgesTargetInput, RoadmapNodeUncheckedCreateWithoutEdgesTargetInput>
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutEdgesTargetInput
    upsert?: RoadmapNodeUpsertWithoutEdgesTargetInput
    connect?: RoadmapNodeWhereUniqueInput
    update?: XOR<XOR<RoadmapNodeUpdateToOneWithWhereWithoutEdgesTargetInput, RoadmapNodeUpdateWithoutEdgesTargetInput>, RoadmapNodeUncheckedUpdateWithoutEdgesTargetInput>
  }

  export type ExerciseCreatehintsInput = {
    set: string[]
  }

  export type NodeExerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<NodeExerciseCreateWithoutExerciseInput, NodeExerciseUncheckedCreateWithoutExerciseInput> | NodeExerciseCreateWithoutExerciseInput[] | NodeExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutExerciseInput | NodeExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: NodeExerciseCreateManyExerciseInputEnvelope
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
  }

  export type UserExerciseProgressCreateNestedManyWithoutExerciseInput = {
    create?: XOR<UserExerciseProgressCreateWithoutExerciseInput, UserExerciseProgressUncheckedCreateWithoutExerciseInput> | UserExerciseProgressCreateWithoutExerciseInput[] | UserExerciseProgressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutExerciseInput | UserExerciseProgressCreateOrConnectWithoutExerciseInput[]
    createMany?: UserExerciseProgressCreateManyExerciseInputEnvelope
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
  }

  export type NodeExerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<NodeExerciseCreateWithoutExerciseInput, NodeExerciseUncheckedCreateWithoutExerciseInput> | NodeExerciseCreateWithoutExerciseInput[] | NodeExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutExerciseInput | NodeExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: NodeExerciseCreateManyExerciseInputEnvelope
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
  }

  export type UserExerciseProgressUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<UserExerciseProgressCreateWithoutExerciseInput, UserExerciseProgressUncheckedCreateWithoutExerciseInput> | UserExerciseProgressCreateWithoutExerciseInput[] | UserExerciseProgressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutExerciseInput | UserExerciseProgressCreateOrConnectWithoutExerciseInput[]
    createMany?: UserExerciseProgressCreateManyExerciseInputEnvelope
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
  }

  export type ExerciseUpdatehintsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NodeExerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<NodeExerciseCreateWithoutExerciseInput, NodeExerciseUncheckedCreateWithoutExerciseInput> | NodeExerciseCreateWithoutExerciseInput[] | NodeExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutExerciseInput | NodeExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: NodeExerciseUpsertWithWhereUniqueWithoutExerciseInput | NodeExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: NodeExerciseCreateManyExerciseInputEnvelope
    set?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    disconnect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    delete?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    update?: NodeExerciseUpdateWithWhereUniqueWithoutExerciseInput | NodeExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: NodeExerciseUpdateManyWithWhereWithoutExerciseInput | NodeExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: NodeExerciseScalarWhereInput | NodeExerciseScalarWhereInput[]
  }

  export type UserExerciseProgressUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<UserExerciseProgressCreateWithoutExerciseInput, UserExerciseProgressUncheckedCreateWithoutExerciseInput> | UserExerciseProgressCreateWithoutExerciseInput[] | UserExerciseProgressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutExerciseInput | UserExerciseProgressCreateOrConnectWithoutExerciseInput[]
    upsert?: UserExerciseProgressUpsertWithWhereUniqueWithoutExerciseInput | UserExerciseProgressUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: UserExerciseProgressCreateManyExerciseInputEnvelope
    set?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    disconnect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    delete?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    update?: UserExerciseProgressUpdateWithWhereUniqueWithoutExerciseInput | UserExerciseProgressUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: UserExerciseProgressUpdateManyWithWhereWithoutExerciseInput | UserExerciseProgressUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: UserExerciseProgressScalarWhereInput | UserExerciseProgressScalarWhereInput[]
  }

  export type NodeExerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<NodeExerciseCreateWithoutExerciseInput, NodeExerciseUncheckedCreateWithoutExerciseInput> | NodeExerciseCreateWithoutExerciseInput[] | NodeExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: NodeExerciseCreateOrConnectWithoutExerciseInput | NodeExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: NodeExerciseUpsertWithWhereUniqueWithoutExerciseInput | NodeExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: NodeExerciseCreateManyExerciseInputEnvelope
    set?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    disconnect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    delete?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    connect?: NodeExerciseWhereUniqueInput | NodeExerciseWhereUniqueInput[]
    update?: NodeExerciseUpdateWithWhereUniqueWithoutExerciseInput | NodeExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: NodeExerciseUpdateManyWithWhereWithoutExerciseInput | NodeExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: NodeExerciseScalarWhereInput | NodeExerciseScalarWhereInput[]
  }

  export type UserExerciseProgressUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<UserExerciseProgressCreateWithoutExerciseInput, UserExerciseProgressUncheckedCreateWithoutExerciseInput> | UserExerciseProgressCreateWithoutExerciseInput[] | UserExerciseProgressUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: UserExerciseProgressCreateOrConnectWithoutExerciseInput | UserExerciseProgressCreateOrConnectWithoutExerciseInput[]
    upsert?: UserExerciseProgressUpsertWithWhereUniqueWithoutExerciseInput | UserExerciseProgressUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: UserExerciseProgressCreateManyExerciseInputEnvelope
    set?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    disconnect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    delete?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    connect?: UserExerciseProgressWhereUniqueInput | UserExerciseProgressWhereUniqueInput[]
    update?: UserExerciseProgressUpdateWithWhereUniqueWithoutExerciseInput | UserExerciseProgressUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: UserExerciseProgressUpdateManyWithWhereWithoutExerciseInput | UserExerciseProgressUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: UserExerciseProgressScalarWhereInput | UserExerciseProgressScalarWhereInput[]
  }

  export type RoadmapNodeCreateNestedOneWithoutExercisesInput = {
    create?: XOR<RoadmapNodeCreateWithoutExercisesInput, RoadmapNodeUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutExercisesInput
    connect?: RoadmapNodeWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutNodeExercisesInput = {
    create?: XOR<ExerciseCreateWithoutNodeExercisesInput, ExerciseUncheckedCreateWithoutNodeExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutNodeExercisesInput
    connect?: ExerciseWhereUniqueInput
  }

  export type RoadmapNodeUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<RoadmapNodeCreateWithoutExercisesInput, RoadmapNodeUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: RoadmapNodeCreateOrConnectWithoutExercisesInput
    upsert?: RoadmapNodeUpsertWithoutExercisesInput
    connect?: RoadmapNodeWhereUniqueInput
    update?: XOR<XOR<RoadmapNodeUpdateToOneWithWhereWithoutExercisesInput, RoadmapNodeUpdateWithoutExercisesInput>, RoadmapNodeUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseUpdateOneRequiredWithoutNodeExercisesNestedInput = {
    create?: XOR<ExerciseCreateWithoutNodeExercisesInput, ExerciseUncheckedCreateWithoutNodeExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutNodeExercisesInput
    upsert?: ExerciseUpsertWithoutNodeExercisesInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutNodeExercisesInput, ExerciseUpdateWithoutNodeExercisesInput>, ExerciseUncheckedUpdateWithoutNodeExercisesInput>
  }

  export type UserCreateNestedOneWithoutExerciseProgressInput = {
    create?: XOR<UserCreateWithoutExerciseProgressInput, UserUncheckedCreateWithoutExerciseProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutExerciseProgressInput
    connect?: UserWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutUserProgressInput = {
    create?: XOR<ExerciseCreateWithoutUserProgressInput, ExerciseUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserProgressInput
    connect?: ExerciseWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutExerciseProgressNestedInput = {
    create?: XOR<UserCreateWithoutExerciseProgressInput, UserUncheckedCreateWithoutExerciseProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutExerciseProgressInput
    upsert?: UserUpsertWithoutExerciseProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExerciseProgressInput, UserUpdateWithoutExerciseProgressInput>, UserUncheckedUpdateWithoutExerciseProgressInput>
  }

  export type ExerciseUpdateOneRequiredWithoutUserProgressNestedInput = {
    create?: XOR<ExerciseCreateWithoutUserProgressInput, ExerciseUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserProgressInput
    upsert?: ExerciseUpsertWithoutUserProgressInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutUserProgressInput, ExerciseUpdateWithoutUserProgressInput>, ExerciseUncheckedUpdateWithoutUserProgressInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserExerciseProgressCreateWithoutUserInput = {
    completed?: boolean
    completedAt?: Date | string | null
    exercise: ExerciseCreateNestedOneWithoutUserProgressInput
  }

  export type UserExerciseProgressUncheckedCreateWithoutUserInput = {
    exerciseId: string
    completed?: boolean
    completedAt?: Date | string | null
  }

  export type UserExerciseProgressCreateOrConnectWithoutUserInput = {
    where: UserExerciseProgressWhereUniqueInput
    create: XOR<UserExerciseProgressCreateWithoutUserInput, UserExerciseProgressUncheckedCreateWithoutUserInput>
  }

  export type UserExerciseProgressCreateManyUserInputEnvelope = {
    data: UserExerciseProgressCreateManyUserInput | UserExerciseProgressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserExerciseProgressUpsertWithWhereUniqueWithoutUserInput = {
    where: UserExerciseProgressWhereUniqueInput
    update: XOR<UserExerciseProgressUpdateWithoutUserInput, UserExerciseProgressUncheckedUpdateWithoutUserInput>
    create: XOR<UserExerciseProgressCreateWithoutUserInput, UserExerciseProgressUncheckedCreateWithoutUserInput>
  }

  export type UserExerciseProgressUpdateWithWhereUniqueWithoutUserInput = {
    where: UserExerciseProgressWhereUniqueInput
    data: XOR<UserExerciseProgressUpdateWithoutUserInput, UserExerciseProgressUncheckedUpdateWithoutUserInput>
  }

  export type UserExerciseProgressUpdateManyWithWhereWithoutUserInput = {
    where: UserExerciseProgressScalarWhereInput
    data: XOR<UserExerciseProgressUpdateManyMutationInput, UserExerciseProgressUncheckedUpdateManyWithoutUserInput>
  }

  export type UserExerciseProgressScalarWhereInput = {
    AND?: UserExerciseProgressScalarWhereInput | UserExerciseProgressScalarWhereInput[]
    OR?: UserExerciseProgressScalarWhereInput[]
    NOT?: UserExerciseProgressScalarWhereInput | UserExerciseProgressScalarWhereInput[]
    userId?: StringFilter<"UserExerciseProgress"> | string
    exerciseId?: StringFilter<"UserExerciseProgress"> | string
    completed?: BoolFilter<"UserExerciseProgress"> | boolean
    completedAt?: DateTimeNullableFilter<"UserExerciseProgress"> | Date | string | null
  }

  export type RoadmapNodeCreateWithoutRoadmapInput = {
    id?: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    edgesSource?: RoadmapEdgeCreateNestedManyWithoutSourceNodeInput
    edgesTarget?: RoadmapEdgeCreateNestedManyWithoutTargetNodeInput
    exercises?: NodeExerciseCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeUncheckedCreateWithoutRoadmapInput = {
    id?: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    edgesSource?: RoadmapEdgeUncheckedCreateNestedManyWithoutSourceNodeInput
    edgesTarget?: RoadmapEdgeUncheckedCreateNestedManyWithoutTargetNodeInput
    exercises?: NodeExerciseUncheckedCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeCreateOrConnectWithoutRoadmapInput = {
    where: RoadmapNodeWhereUniqueInput
    create: XOR<RoadmapNodeCreateWithoutRoadmapInput, RoadmapNodeUncheckedCreateWithoutRoadmapInput>
  }

  export type RoadmapNodeCreateManyRoadmapInputEnvelope = {
    data: RoadmapNodeCreateManyRoadmapInput | RoadmapNodeCreateManyRoadmapInput[]
    skipDuplicates?: boolean
  }

  export type RoadmapEdgeCreateWithoutRoadmapInput = {
    id?: string
    sourceNode: RoadmapNodeCreateNestedOneWithoutEdgesSourceInput
    targetNode: RoadmapNodeCreateNestedOneWithoutEdgesTargetInput
  }

  export type RoadmapEdgeUncheckedCreateWithoutRoadmapInput = {
    id?: string
    sourceNodeId: string
    targetNodeId: string
  }

  export type RoadmapEdgeCreateOrConnectWithoutRoadmapInput = {
    where: RoadmapEdgeWhereUniqueInput
    create: XOR<RoadmapEdgeCreateWithoutRoadmapInput, RoadmapEdgeUncheckedCreateWithoutRoadmapInput>
  }

  export type RoadmapEdgeCreateManyRoadmapInputEnvelope = {
    data: RoadmapEdgeCreateManyRoadmapInput | RoadmapEdgeCreateManyRoadmapInput[]
    skipDuplicates?: boolean
  }

  export type RoadmapNodeUpsertWithWhereUniqueWithoutRoadmapInput = {
    where: RoadmapNodeWhereUniqueInput
    update: XOR<RoadmapNodeUpdateWithoutRoadmapInput, RoadmapNodeUncheckedUpdateWithoutRoadmapInput>
    create: XOR<RoadmapNodeCreateWithoutRoadmapInput, RoadmapNodeUncheckedCreateWithoutRoadmapInput>
  }

  export type RoadmapNodeUpdateWithWhereUniqueWithoutRoadmapInput = {
    where: RoadmapNodeWhereUniqueInput
    data: XOR<RoadmapNodeUpdateWithoutRoadmapInput, RoadmapNodeUncheckedUpdateWithoutRoadmapInput>
  }

  export type RoadmapNodeUpdateManyWithWhereWithoutRoadmapInput = {
    where: RoadmapNodeScalarWhereInput
    data: XOR<RoadmapNodeUpdateManyMutationInput, RoadmapNodeUncheckedUpdateManyWithoutRoadmapInput>
  }

  export type RoadmapNodeScalarWhereInput = {
    AND?: RoadmapNodeScalarWhereInput | RoadmapNodeScalarWhereInput[]
    OR?: RoadmapNodeScalarWhereInput[]
    NOT?: RoadmapNodeScalarWhereInput | RoadmapNodeScalarWhereInput[]
    id?: StringFilter<"RoadmapNode"> | string
    roadmapId?: StringFilter<"RoadmapNode"> | string
    label?: StringFilter<"RoadmapNode"> | string
    description?: StringNullableFilter<"RoadmapNode"> | string | null
    type?: StringFilter<"RoadmapNode"> | string
    positionX?: IntNullableFilter<"RoadmapNode"> | number | null
    positionY?: IntNullableFilter<"RoadmapNode"> | number | null
  }

  export type RoadmapEdgeUpsertWithWhereUniqueWithoutRoadmapInput = {
    where: RoadmapEdgeWhereUniqueInput
    update: XOR<RoadmapEdgeUpdateWithoutRoadmapInput, RoadmapEdgeUncheckedUpdateWithoutRoadmapInput>
    create: XOR<RoadmapEdgeCreateWithoutRoadmapInput, RoadmapEdgeUncheckedCreateWithoutRoadmapInput>
  }

  export type RoadmapEdgeUpdateWithWhereUniqueWithoutRoadmapInput = {
    where: RoadmapEdgeWhereUniqueInput
    data: XOR<RoadmapEdgeUpdateWithoutRoadmapInput, RoadmapEdgeUncheckedUpdateWithoutRoadmapInput>
  }

  export type RoadmapEdgeUpdateManyWithWhereWithoutRoadmapInput = {
    where: RoadmapEdgeScalarWhereInput
    data: XOR<RoadmapEdgeUpdateManyMutationInput, RoadmapEdgeUncheckedUpdateManyWithoutRoadmapInput>
  }

  export type RoadmapEdgeScalarWhereInput = {
    AND?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
    OR?: RoadmapEdgeScalarWhereInput[]
    NOT?: RoadmapEdgeScalarWhereInput | RoadmapEdgeScalarWhereInput[]
    id?: StringFilter<"RoadmapEdge"> | string
    roadmapId?: StringFilter<"RoadmapEdge"> | string
    sourceNodeId?: StringFilter<"RoadmapEdge"> | string
    targetNodeId?: StringFilter<"RoadmapEdge"> | string
  }

  export type RoadmapCreateWithoutNodesInput = {
    id?: string
    title: string
    description?: string | null
    category?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    edges?: RoadmapEdgeCreateNestedManyWithoutRoadmapInput
  }

  export type RoadmapUncheckedCreateWithoutNodesInput = {
    id?: string
    title: string
    description?: string | null
    category?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    edges?: RoadmapEdgeUncheckedCreateNestedManyWithoutRoadmapInput
  }

  export type RoadmapCreateOrConnectWithoutNodesInput = {
    where: RoadmapWhereUniqueInput
    create: XOR<RoadmapCreateWithoutNodesInput, RoadmapUncheckedCreateWithoutNodesInput>
  }

  export type RoadmapEdgeCreateWithoutSourceNodeInput = {
    id?: string
    roadmap: RoadmapCreateNestedOneWithoutEdgesInput
    targetNode: RoadmapNodeCreateNestedOneWithoutEdgesTargetInput
  }

  export type RoadmapEdgeUncheckedCreateWithoutSourceNodeInput = {
    id?: string
    roadmapId: string
    targetNodeId: string
  }

  export type RoadmapEdgeCreateOrConnectWithoutSourceNodeInput = {
    where: RoadmapEdgeWhereUniqueInput
    create: XOR<RoadmapEdgeCreateWithoutSourceNodeInput, RoadmapEdgeUncheckedCreateWithoutSourceNodeInput>
  }

  export type RoadmapEdgeCreateManySourceNodeInputEnvelope = {
    data: RoadmapEdgeCreateManySourceNodeInput | RoadmapEdgeCreateManySourceNodeInput[]
    skipDuplicates?: boolean
  }

  export type RoadmapEdgeCreateWithoutTargetNodeInput = {
    id?: string
    roadmap: RoadmapCreateNestedOneWithoutEdgesInput
    sourceNode: RoadmapNodeCreateNestedOneWithoutEdgesSourceInput
  }

  export type RoadmapEdgeUncheckedCreateWithoutTargetNodeInput = {
    id?: string
    roadmapId: string
    sourceNodeId: string
  }

  export type RoadmapEdgeCreateOrConnectWithoutTargetNodeInput = {
    where: RoadmapEdgeWhereUniqueInput
    create: XOR<RoadmapEdgeCreateWithoutTargetNodeInput, RoadmapEdgeUncheckedCreateWithoutTargetNodeInput>
  }

  export type RoadmapEdgeCreateManyTargetNodeInputEnvelope = {
    data: RoadmapEdgeCreateManyTargetNodeInput | RoadmapEdgeCreateManyTargetNodeInput[]
    skipDuplicates?: boolean
  }

  export type NodeExerciseCreateWithoutNodeInput = {
    orderIndex?: number | null
    exercise: ExerciseCreateNestedOneWithoutNodeExercisesInput
  }

  export type NodeExerciseUncheckedCreateWithoutNodeInput = {
    exerciseId: string
    orderIndex?: number | null
  }

  export type NodeExerciseCreateOrConnectWithoutNodeInput = {
    where: NodeExerciseWhereUniqueInput
    create: XOR<NodeExerciseCreateWithoutNodeInput, NodeExerciseUncheckedCreateWithoutNodeInput>
  }

  export type NodeExerciseCreateManyNodeInputEnvelope = {
    data: NodeExerciseCreateManyNodeInput | NodeExerciseCreateManyNodeInput[]
    skipDuplicates?: boolean
  }

  export type RoadmapUpsertWithoutNodesInput = {
    update: XOR<RoadmapUpdateWithoutNodesInput, RoadmapUncheckedUpdateWithoutNodesInput>
    create: XOR<RoadmapCreateWithoutNodesInput, RoadmapUncheckedCreateWithoutNodesInput>
    where?: RoadmapWhereInput
  }

  export type RoadmapUpdateToOneWithWhereWithoutNodesInput = {
    where?: RoadmapWhereInput
    data: XOR<RoadmapUpdateWithoutNodesInput, RoadmapUncheckedUpdateWithoutNodesInput>
  }

  export type RoadmapUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    edges?: RoadmapEdgeUpdateManyWithoutRoadmapNestedInput
  }

  export type RoadmapUncheckedUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    edges?: RoadmapEdgeUncheckedUpdateManyWithoutRoadmapNestedInput
  }

  export type RoadmapEdgeUpsertWithWhereUniqueWithoutSourceNodeInput = {
    where: RoadmapEdgeWhereUniqueInput
    update: XOR<RoadmapEdgeUpdateWithoutSourceNodeInput, RoadmapEdgeUncheckedUpdateWithoutSourceNodeInput>
    create: XOR<RoadmapEdgeCreateWithoutSourceNodeInput, RoadmapEdgeUncheckedCreateWithoutSourceNodeInput>
  }

  export type RoadmapEdgeUpdateWithWhereUniqueWithoutSourceNodeInput = {
    where: RoadmapEdgeWhereUniqueInput
    data: XOR<RoadmapEdgeUpdateWithoutSourceNodeInput, RoadmapEdgeUncheckedUpdateWithoutSourceNodeInput>
  }

  export type RoadmapEdgeUpdateManyWithWhereWithoutSourceNodeInput = {
    where: RoadmapEdgeScalarWhereInput
    data: XOR<RoadmapEdgeUpdateManyMutationInput, RoadmapEdgeUncheckedUpdateManyWithoutSourceNodeInput>
  }

  export type RoadmapEdgeUpsertWithWhereUniqueWithoutTargetNodeInput = {
    where: RoadmapEdgeWhereUniqueInput
    update: XOR<RoadmapEdgeUpdateWithoutTargetNodeInput, RoadmapEdgeUncheckedUpdateWithoutTargetNodeInput>
    create: XOR<RoadmapEdgeCreateWithoutTargetNodeInput, RoadmapEdgeUncheckedCreateWithoutTargetNodeInput>
  }

  export type RoadmapEdgeUpdateWithWhereUniqueWithoutTargetNodeInput = {
    where: RoadmapEdgeWhereUniqueInput
    data: XOR<RoadmapEdgeUpdateWithoutTargetNodeInput, RoadmapEdgeUncheckedUpdateWithoutTargetNodeInput>
  }

  export type RoadmapEdgeUpdateManyWithWhereWithoutTargetNodeInput = {
    where: RoadmapEdgeScalarWhereInput
    data: XOR<RoadmapEdgeUpdateManyMutationInput, RoadmapEdgeUncheckedUpdateManyWithoutTargetNodeInput>
  }

  export type NodeExerciseUpsertWithWhereUniqueWithoutNodeInput = {
    where: NodeExerciseWhereUniqueInput
    update: XOR<NodeExerciseUpdateWithoutNodeInput, NodeExerciseUncheckedUpdateWithoutNodeInput>
    create: XOR<NodeExerciseCreateWithoutNodeInput, NodeExerciseUncheckedCreateWithoutNodeInput>
  }

  export type NodeExerciseUpdateWithWhereUniqueWithoutNodeInput = {
    where: NodeExerciseWhereUniqueInput
    data: XOR<NodeExerciseUpdateWithoutNodeInput, NodeExerciseUncheckedUpdateWithoutNodeInput>
  }

  export type NodeExerciseUpdateManyWithWhereWithoutNodeInput = {
    where: NodeExerciseScalarWhereInput
    data: XOR<NodeExerciseUpdateManyMutationInput, NodeExerciseUncheckedUpdateManyWithoutNodeInput>
  }

  export type NodeExerciseScalarWhereInput = {
    AND?: NodeExerciseScalarWhereInput | NodeExerciseScalarWhereInput[]
    OR?: NodeExerciseScalarWhereInput[]
    NOT?: NodeExerciseScalarWhereInput | NodeExerciseScalarWhereInput[]
    nodeId?: StringFilter<"NodeExercise"> | string
    exerciseId?: StringFilter<"NodeExercise"> | string
    orderIndex?: IntNullableFilter<"NodeExercise"> | number | null
  }

  export type RoadmapCreateWithoutEdgesInput = {
    id?: string
    title: string
    description?: string | null
    category?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    nodes?: RoadmapNodeCreateNestedManyWithoutRoadmapInput
  }

  export type RoadmapUncheckedCreateWithoutEdgesInput = {
    id?: string
    title: string
    description?: string | null
    category?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    nodes?: RoadmapNodeUncheckedCreateNestedManyWithoutRoadmapInput
  }

  export type RoadmapCreateOrConnectWithoutEdgesInput = {
    where: RoadmapWhereUniqueInput
    create: XOR<RoadmapCreateWithoutEdgesInput, RoadmapUncheckedCreateWithoutEdgesInput>
  }

  export type RoadmapNodeCreateWithoutEdgesSourceInput = {
    id?: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    roadmap: RoadmapCreateNestedOneWithoutNodesInput
    edgesTarget?: RoadmapEdgeCreateNestedManyWithoutTargetNodeInput
    exercises?: NodeExerciseCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeUncheckedCreateWithoutEdgesSourceInput = {
    id?: string
    roadmapId: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    edgesTarget?: RoadmapEdgeUncheckedCreateNestedManyWithoutTargetNodeInput
    exercises?: NodeExerciseUncheckedCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeCreateOrConnectWithoutEdgesSourceInput = {
    where: RoadmapNodeWhereUniqueInput
    create: XOR<RoadmapNodeCreateWithoutEdgesSourceInput, RoadmapNodeUncheckedCreateWithoutEdgesSourceInput>
  }

  export type RoadmapNodeCreateWithoutEdgesTargetInput = {
    id?: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    roadmap: RoadmapCreateNestedOneWithoutNodesInput
    edgesSource?: RoadmapEdgeCreateNestedManyWithoutSourceNodeInput
    exercises?: NodeExerciseCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeUncheckedCreateWithoutEdgesTargetInput = {
    id?: string
    roadmapId: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    edgesSource?: RoadmapEdgeUncheckedCreateNestedManyWithoutSourceNodeInput
    exercises?: NodeExerciseUncheckedCreateNestedManyWithoutNodeInput
  }

  export type RoadmapNodeCreateOrConnectWithoutEdgesTargetInput = {
    where: RoadmapNodeWhereUniqueInput
    create: XOR<RoadmapNodeCreateWithoutEdgesTargetInput, RoadmapNodeUncheckedCreateWithoutEdgesTargetInput>
  }

  export type RoadmapUpsertWithoutEdgesInput = {
    update: XOR<RoadmapUpdateWithoutEdgesInput, RoadmapUncheckedUpdateWithoutEdgesInput>
    create: XOR<RoadmapCreateWithoutEdgesInput, RoadmapUncheckedCreateWithoutEdgesInput>
    where?: RoadmapWhereInput
  }

  export type RoadmapUpdateToOneWithWhereWithoutEdgesInput = {
    where?: RoadmapWhereInput
    data: XOR<RoadmapUpdateWithoutEdgesInput, RoadmapUncheckedUpdateWithoutEdgesInput>
  }

  export type RoadmapUpdateWithoutEdgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: RoadmapNodeUpdateManyWithoutRoadmapNestedInput
  }

  export type RoadmapUncheckedUpdateWithoutEdgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: RoadmapNodeUncheckedUpdateManyWithoutRoadmapNestedInput
  }

  export type RoadmapNodeUpsertWithoutEdgesSourceInput = {
    update: XOR<RoadmapNodeUpdateWithoutEdgesSourceInput, RoadmapNodeUncheckedUpdateWithoutEdgesSourceInput>
    create: XOR<RoadmapNodeCreateWithoutEdgesSourceInput, RoadmapNodeUncheckedCreateWithoutEdgesSourceInput>
    where?: RoadmapNodeWhereInput
  }

  export type RoadmapNodeUpdateToOneWithWhereWithoutEdgesSourceInput = {
    where?: RoadmapNodeWhereInput
    data: XOR<RoadmapNodeUpdateWithoutEdgesSourceInput, RoadmapNodeUncheckedUpdateWithoutEdgesSourceInput>
  }

  export type RoadmapNodeUpdateWithoutEdgesSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    roadmap?: RoadmapUpdateOneRequiredWithoutNodesNestedInput
    edgesTarget?: RoadmapEdgeUpdateManyWithoutTargetNodeNestedInput
    exercises?: NodeExerciseUpdateManyWithoutNodeNestedInput
  }

  export type RoadmapNodeUncheckedUpdateWithoutEdgesSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    edgesTarget?: RoadmapEdgeUncheckedUpdateManyWithoutTargetNodeNestedInput
    exercises?: NodeExerciseUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type RoadmapNodeUpsertWithoutEdgesTargetInput = {
    update: XOR<RoadmapNodeUpdateWithoutEdgesTargetInput, RoadmapNodeUncheckedUpdateWithoutEdgesTargetInput>
    create: XOR<RoadmapNodeCreateWithoutEdgesTargetInput, RoadmapNodeUncheckedCreateWithoutEdgesTargetInput>
    where?: RoadmapNodeWhereInput
  }

  export type RoadmapNodeUpdateToOneWithWhereWithoutEdgesTargetInput = {
    where?: RoadmapNodeWhereInput
    data: XOR<RoadmapNodeUpdateWithoutEdgesTargetInput, RoadmapNodeUncheckedUpdateWithoutEdgesTargetInput>
  }

  export type RoadmapNodeUpdateWithoutEdgesTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    roadmap?: RoadmapUpdateOneRequiredWithoutNodesNestedInput
    edgesSource?: RoadmapEdgeUpdateManyWithoutSourceNodeNestedInput
    exercises?: NodeExerciseUpdateManyWithoutNodeNestedInput
  }

  export type RoadmapNodeUncheckedUpdateWithoutEdgesTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    edgesSource?: RoadmapEdgeUncheckedUpdateManyWithoutSourceNodeNestedInput
    exercises?: NodeExerciseUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type NodeExerciseCreateWithoutExerciseInput = {
    orderIndex?: number | null
    node: RoadmapNodeCreateNestedOneWithoutExercisesInput
  }

  export type NodeExerciseUncheckedCreateWithoutExerciseInput = {
    nodeId: string
    orderIndex?: number | null
  }

  export type NodeExerciseCreateOrConnectWithoutExerciseInput = {
    where: NodeExerciseWhereUniqueInput
    create: XOR<NodeExerciseCreateWithoutExerciseInput, NodeExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type NodeExerciseCreateManyExerciseInputEnvelope = {
    data: NodeExerciseCreateManyExerciseInput | NodeExerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type UserExerciseProgressCreateWithoutExerciseInput = {
    completed?: boolean
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutExerciseProgressInput
  }

  export type UserExerciseProgressUncheckedCreateWithoutExerciseInput = {
    userId: string
    completed?: boolean
    completedAt?: Date | string | null
  }

  export type UserExerciseProgressCreateOrConnectWithoutExerciseInput = {
    where: UserExerciseProgressWhereUniqueInput
    create: XOR<UserExerciseProgressCreateWithoutExerciseInput, UserExerciseProgressUncheckedCreateWithoutExerciseInput>
  }

  export type UserExerciseProgressCreateManyExerciseInputEnvelope = {
    data: UserExerciseProgressCreateManyExerciseInput | UserExerciseProgressCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type NodeExerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: NodeExerciseWhereUniqueInput
    update: XOR<NodeExerciseUpdateWithoutExerciseInput, NodeExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<NodeExerciseCreateWithoutExerciseInput, NodeExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type NodeExerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: NodeExerciseWhereUniqueInput
    data: XOR<NodeExerciseUpdateWithoutExerciseInput, NodeExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type NodeExerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: NodeExerciseScalarWhereInput
    data: XOR<NodeExerciseUpdateManyMutationInput, NodeExerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type UserExerciseProgressUpsertWithWhereUniqueWithoutExerciseInput = {
    where: UserExerciseProgressWhereUniqueInput
    update: XOR<UserExerciseProgressUpdateWithoutExerciseInput, UserExerciseProgressUncheckedUpdateWithoutExerciseInput>
    create: XOR<UserExerciseProgressCreateWithoutExerciseInput, UserExerciseProgressUncheckedCreateWithoutExerciseInput>
  }

  export type UserExerciseProgressUpdateWithWhereUniqueWithoutExerciseInput = {
    where: UserExerciseProgressWhereUniqueInput
    data: XOR<UserExerciseProgressUpdateWithoutExerciseInput, UserExerciseProgressUncheckedUpdateWithoutExerciseInput>
  }

  export type UserExerciseProgressUpdateManyWithWhereWithoutExerciseInput = {
    where: UserExerciseProgressScalarWhereInput
    data: XOR<UserExerciseProgressUpdateManyMutationInput, UserExerciseProgressUncheckedUpdateManyWithoutExerciseInput>
  }

  export type RoadmapNodeCreateWithoutExercisesInput = {
    id?: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    roadmap: RoadmapCreateNestedOneWithoutNodesInput
    edgesSource?: RoadmapEdgeCreateNestedManyWithoutSourceNodeInput
    edgesTarget?: RoadmapEdgeCreateNestedManyWithoutTargetNodeInput
  }

  export type RoadmapNodeUncheckedCreateWithoutExercisesInput = {
    id?: string
    roadmapId: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
    edgesSource?: RoadmapEdgeUncheckedCreateNestedManyWithoutSourceNodeInput
    edgesTarget?: RoadmapEdgeUncheckedCreateNestedManyWithoutTargetNodeInput
  }

  export type RoadmapNodeCreateOrConnectWithoutExercisesInput = {
    where: RoadmapNodeWhereUniqueInput
    create: XOR<RoadmapNodeCreateWithoutExercisesInput, RoadmapNodeUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseCreateWithoutNodeExercisesInput = {
    id: string
    name: string
    difficulty: string
    hints?: ExerciseCreatehintsInput | string[]
    solution?: string | null
    videoUrl?: string | null
    description?: string | null
    questionImageUrl?: string | null
    type?: string | null
    isActive?: boolean
    userProgress?: UserExerciseProgressCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutNodeExercisesInput = {
    id: string
    name: string
    difficulty: string
    hints?: ExerciseCreatehintsInput | string[]
    solution?: string | null
    videoUrl?: string | null
    description?: string | null
    questionImageUrl?: string | null
    type?: string | null
    isActive?: boolean
    userProgress?: UserExerciseProgressUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutNodeExercisesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutNodeExercisesInput, ExerciseUncheckedCreateWithoutNodeExercisesInput>
  }

  export type RoadmapNodeUpsertWithoutExercisesInput = {
    update: XOR<RoadmapNodeUpdateWithoutExercisesInput, RoadmapNodeUncheckedUpdateWithoutExercisesInput>
    create: XOR<RoadmapNodeCreateWithoutExercisesInput, RoadmapNodeUncheckedCreateWithoutExercisesInput>
    where?: RoadmapNodeWhereInput
  }

  export type RoadmapNodeUpdateToOneWithWhereWithoutExercisesInput = {
    where?: RoadmapNodeWhereInput
    data: XOR<RoadmapNodeUpdateWithoutExercisesInput, RoadmapNodeUncheckedUpdateWithoutExercisesInput>
  }

  export type RoadmapNodeUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    roadmap?: RoadmapUpdateOneRequiredWithoutNodesNestedInput
    edgesSource?: RoadmapEdgeUpdateManyWithoutSourceNodeNestedInput
    edgesTarget?: RoadmapEdgeUpdateManyWithoutTargetNodeNestedInput
  }

  export type RoadmapNodeUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    edgesSource?: RoadmapEdgeUncheckedUpdateManyWithoutSourceNodeNestedInput
    edgesTarget?: RoadmapEdgeUncheckedUpdateManyWithoutTargetNodeNestedInput
  }

  export type ExerciseUpsertWithoutNodeExercisesInput = {
    update: XOR<ExerciseUpdateWithoutNodeExercisesInput, ExerciseUncheckedUpdateWithoutNodeExercisesInput>
    create: XOR<ExerciseCreateWithoutNodeExercisesInput, ExerciseUncheckedCreateWithoutNodeExercisesInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutNodeExercisesInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutNodeExercisesInput, ExerciseUncheckedUpdateWithoutNodeExercisesInput>
  }

  export type ExerciseUpdateWithoutNodeExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserExerciseProgressUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutNodeExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserExerciseProgressUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type UserCreateWithoutExerciseProgressInput = {
    id: string
    email: string
    name?: string | null
    image?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutExerciseProgressInput = {
    id: string
    email: string
    name?: string | null
    image?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutExerciseProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExerciseProgressInput, UserUncheckedCreateWithoutExerciseProgressInput>
  }

  export type ExerciseCreateWithoutUserProgressInput = {
    id: string
    name: string
    difficulty: string
    hints?: ExerciseCreatehintsInput | string[]
    solution?: string | null
    videoUrl?: string | null
    description?: string | null
    questionImageUrl?: string | null
    type?: string | null
    isActive?: boolean
    nodeExercises?: NodeExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutUserProgressInput = {
    id: string
    name: string
    difficulty: string
    hints?: ExerciseCreatehintsInput | string[]
    solution?: string | null
    videoUrl?: string | null
    description?: string | null
    questionImageUrl?: string | null
    type?: string | null
    isActive?: boolean
    nodeExercises?: NodeExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutUserProgressInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutUserProgressInput, ExerciseUncheckedCreateWithoutUserProgressInput>
  }

  export type UserUpsertWithoutExerciseProgressInput = {
    update: XOR<UserUpdateWithoutExerciseProgressInput, UserUncheckedUpdateWithoutExerciseProgressInput>
    create: XOR<UserCreateWithoutExerciseProgressInput, UserUncheckedCreateWithoutExerciseProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExerciseProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExerciseProgressInput, UserUncheckedUpdateWithoutExerciseProgressInput>
  }

  export type UserUpdateWithoutExerciseProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutExerciseProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUpsertWithoutUserProgressInput = {
    update: XOR<ExerciseUpdateWithoutUserProgressInput, ExerciseUncheckedUpdateWithoutUserProgressInput>
    create: XOR<ExerciseCreateWithoutUserProgressInput, ExerciseUncheckedCreateWithoutUserProgressInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutUserProgressInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutUserProgressInput, ExerciseUncheckedUpdateWithoutUserProgressInput>
  }

  export type ExerciseUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nodeExercises?: NodeExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    hints?: ExerciseUpdatehintsInput | string[]
    solution?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    questionImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    nodeExercises?: NodeExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type UserExerciseProgressCreateManyUserInput = {
    exerciseId: string
    completed?: boolean
    completedAt?: Date | string | null
  }

  export type UserExerciseProgressUpdateWithoutUserInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exercise?: ExerciseUpdateOneRequiredWithoutUserProgressNestedInput
  }

  export type UserExerciseProgressUncheckedUpdateWithoutUserInput = {
    exerciseId?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserExerciseProgressUncheckedUpdateManyWithoutUserInput = {
    exerciseId?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoadmapNodeCreateManyRoadmapInput = {
    id?: string
    label: string
    description?: string | null
    type?: string
    positionX?: number | null
    positionY?: number | null
  }

  export type RoadmapEdgeCreateManyRoadmapInput = {
    id?: string
    sourceNodeId: string
    targetNodeId: string
  }

  export type RoadmapNodeUpdateWithoutRoadmapInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    edgesSource?: RoadmapEdgeUpdateManyWithoutSourceNodeNestedInput
    edgesTarget?: RoadmapEdgeUpdateManyWithoutTargetNodeNestedInput
    exercises?: NodeExerciseUpdateManyWithoutNodeNestedInput
  }

  export type RoadmapNodeUncheckedUpdateWithoutRoadmapInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
    edgesSource?: RoadmapEdgeUncheckedUpdateManyWithoutSourceNodeNestedInput
    edgesTarget?: RoadmapEdgeUncheckedUpdateManyWithoutTargetNodeNestedInput
    exercises?: NodeExerciseUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type RoadmapNodeUncheckedUpdateManyWithoutRoadmapInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    positionX?: NullableIntFieldUpdateOperationsInput | number | null
    positionY?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RoadmapEdgeUpdateWithoutRoadmapInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceNode?: RoadmapNodeUpdateOneRequiredWithoutEdgesSourceNestedInput
    targetNode?: RoadmapNodeUpdateOneRequiredWithoutEdgesTargetNestedInput
  }

  export type RoadmapEdgeUncheckedUpdateWithoutRoadmapInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceNodeId?: StringFieldUpdateOperationsInput | string
    targetNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type RoadmapEdgeUncheckedUpdateManyWithoutRoadmapInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceNodeId?: StringFieldUpdateOperationsInput | string
    targetNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type RoadmapEdgeCreateManySourceNodeInput = {
    id?: string
    roadmapId: string
    targetNodeId: string
  }

  export type RoadmapEdgeCreateManyTargetNodeInput = {
    id?: string
    roadmapId: string
    sourceNodeId: string
  }

  export type NodeExerciseCreateManyNodeInput = {
    exerciseId: string
    orderIndex?: number | null
  }

  export type RoadmapEdgeUpdateWithoutSourceNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmap?: RoadmapUpdateOneRequiredWithoutEdgesNestedInput
    targetNode?: RoadmapNodeUpdateOneRequiredWithoutEdgesTargetNestedInput
  }

  export type RoadmapEdgeUncheckedUpdateWithoutSourceNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    targetNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type RoadmapEdgeUncheckedUpdateManyWithoutSourceNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    targetNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type RoadmapEdgeUpdateWithoutTargetNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmap?: RoadmapUpdateOneRequiredWithoutEdgesNestedInput
    sourceNode?: RoadmapNodeUpdateOneRequiredWithoutEdgesSourceNestedInput
  }

  export type RoadmapEdgeUncheckedUpdateWithoutTargetNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    sourceNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type RoadmapEdgeUncheckedUpdateManyWithoutTargetNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    roadmapId?: StringFieldUpdateOperationsInput | string
    sourceNodeId?: StringFieldUpdateOperationsInput | string
  }

  export type NodeExerciseUpdateWithoutNodeInput = {
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: ExerciseUpdateOneRequiredWithoutNodeExercisesNestedInput
  }

  export type NodeExerciseUncheckedUpdateWithoutNodeInput = {
    exerciseId?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NodeExerciseUncheckedUpdateManyWithoutNodeInput = {
    exerciseId?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NodeExerciseCreateManyExerciseInput = {
    nodeId: string
    orderIndex?: number | null
  }

  export type UserExerciseProgressCreateManyExerciseInput = {
    userId: string
    completed?: boolean
    completedAt?: Date | string | null
  }

  export type NodeExerciseUpdateWithoutExerciseInput = {
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
    node?: RoadmapNodeUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type NodeExerciseUncheckedUpdateWithoutExerciseInput = {
    nodeId?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NodeExerciseUncheckedUpdateManyWithoutExerciseInput = {
    nodeId?: StringFieldUpdateOperationsInput | string
    orderIndex?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserExerciseProgressUpdateWithoutExerciseInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutExerciseProgressNestedInput
  }

  export type UserExerciseProgressUncheckedUpdateWithoutExerciseInput = {
    userId?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserExerciseProgressUncheckedUpdateManyWithoutExerciseInput = {
    userId?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}